{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2022-10-22T16:13:23.822Z",
        "id": "page_1",
        "title": "https://3kh0.github.io/projects/chrome-dino/index.html",
        "pageTimings": {
          "onContentLoad": 470.03399999812245,
          "onLoad": 1283.0679999970016
        }
      }
    ],
    "entries": [
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/projects/chrome-dino/index.html",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects.html"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "content-length",
              "value": "13402"
            },
            {
              "name": "content-type",
              "value": "text/html; charset=utf-8"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:13:15 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"6351ed68-7a74\""
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 16:23:15 GMT"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:56 GMT"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "x-fastly-request-id",
              "value": "b459602c8b33b5cddbba88cf3dbf3e353df3fb52"
            },
            {
              "name": "x-github-request-id",
              "value": "0808:0A87:AF3B54:EDB2D9:6354169B"
            },
            {
              "name": "x-origin-cache",
              "value": "HIT"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21935-LGA"
            },
            {
              "name": "x-timer",
              "value": "S1666455196.670987,VS0,VE12"
            }
          ],
          "cookies": [],
          "content": {
            "size": 31348,
            "mimeType": "text/html",
            "text": "\n<!doctype html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no\">\n\t<meta name=\"color-scheme\" content=\"light dark\">\n\t<link rel=\"apple-touch-icon\" sizes=\"128x128\" href=\"icons/icon-128.png\">\n\t<link rel=\"apple-touch-icon\" sizes=\"256x256\" href=\"icons/icon-256.png\">\n\t<meta name=\"theme-color\" content=\"#fff\">\n\t<link rel=\"icon\" href=\"favicon.ico\">\n    <title>Chrome Dino | 3kh0</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <script src=\"game.js\"></script>\n\t<link rel=\"manifest\" href=\"appmanifest.json\">\n</head>\n<script src=\"/js/main.js\"></script>\n<body id=\"t\" class=\"offline\">\n    <div id=\"main-frame-error\" class=\"interstitial-wrapper\">\n        <div id=\"main-content\">\n            <div class=\"icon icon-offline\" alt=\"\"></div>\n        </div>\n        <div id=\"offline-resources\">\n            <img id=\"offline-resources-1x\" src=\"images/default_100_percent/100-error-offline.png\">\n            <img id=\"offline-resources-2x\" src=\"images/default_200_percent/200-error-offline.png\">\n            <template id=\"audio-resources\">\n                <audio id=\"offline-sound-press\" src=\"data:audio/mpeg;base64,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\"></audio>\n                <audio id=\"offline-sound-hit\" src=\"data:audio/mpeg;base64,\"></audio>\n                <audio id=\"offline-sound-reached\" src=\"data:audio/mpeg;base64,\"></audio>\n            </template>\n        </div>\n\t\t    <div id=\"messageBox\">\n         <h1 id=\"h1\" style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\">Press space/up to play</h1>\n    </div>\n    </div>\n\n</body>\n<script src=\"register-sw.js\"></script>\n<script>\n    document.onkeydown = function(evt) {\n    evt = evt || window.event;\n    if (evt.keyCode == 32 || evt.keyCode == 38) {\n        var box = document.getElementById(\"messageBox\");\n        box.style.visibility=\"hidden\";\n\t\t}\n\t};\n    \n    function is_touch_enabled() {\n            return ( 'ontouchstart' in window ) || \n                   ( navigator.maxTouchPoints > 0 ) ||\n                   ( navigator.msMaxTouchPoints > 0 );\n    }\n    if ( is_touch_enabled() ) {\n        var box = document.getElementById(\"h1\");\n        box.innerHTML = \"Touch the screen to play\";\n    }\n\n    // Hide text on touch devices\n    document.ontouchstart = touchDevices;\n    function touchDevices() {\n        var box = document.getElementById(\"messageBox\");\n        box.style.visibility=\"hidden\";\n    };\n\n</script>\n</html>\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:23.803Z",
        "time": 58.3440000009432,
        "timings": {
          "blocked": 20.87800000172807,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 18.31300000175601,
          "receive": 19.15299999745912,
          "_blocked_queueing": 18.76800000172807
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://3kh0.github.io/projects/chrome-dino/index.html",
          "lineNumber": 13
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/projects/chrome-dino/style.css",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "x-fastly-request-id",
              "value": "5ff8c22fa4edac6e83f4b9f260b5c91c5b246914"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:13:15 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "content-length",
              "value": "1103"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21935-LGA"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:56 GMT"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "x-github-request-id",
              "value": "0808:0A87:AF3B5B:EDB2E5:6354169B"
            },
            {
              "name": "x-timer",
              "value": "S1666455196.961010,VS0,VE13"
            },
            {
              "name": "etag",
              "value": "W/\"6351ed68-e57\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "text/css; charset=utf-8"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 16:23:15 GMT"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-origin-cache",
              "value": "HIT"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            }
          ],
          "cookies": [],
          "content": {
            "size": 3671,
            "mimeType": "text/css",
            "text": "/* Copyright 2013 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file. */\n\nhtml, body {\n  padding: 0;\n  margin: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.icon {\n  -webkit-user-select: none;\n  user-select: none;\n  display: inline-block;\n}\n\n\n.hidden {\n  display: none;\n}\n\n\n/* Offline page */\n.offline {\n  transition: filter 1.5s cubic-bezier(0.65, 0.05, 0.36, 1),\n              background-color 1.5s cubic-bezier(0.65, 0.05, 0.36, 1);\n}\n\n.offline body {\n  transition: background-color 1.5s cubic-bezier(0.65, 0.05, 0.36, 1);\n}\n.offline.inverted {\n  background-color: #000;\n  filter: invert(1);\n}\n\n.offline.inverted body {\n  background-color: #fff;\n}\n\n.offline .interstitial-wrapper {\n  color: #2b2b2b;\n  font-size: 0.8em;\n  line-height: 1.55;\n  margin: 0 auto;\n  max-width: 600px;\n  padding-top: 150px;\n  width: 100%;\n}\n\n.offline .runner-container {\n  direction: ltr;\n  height: 150px;\n  max-width: 600px;\n  overflow: hidden;\n  position: absolute;\n  top: 35px;\n  width: 44px;\n}\n\n.offline .runner-canvas {\n  height: 150px;\n  max-width: 600px;\n  opacity: 1;\n  overflow: hidden;\n  position: absolute;\n  top: 0;\n  z-index: 10;\n}\n\n.offline .controller {\n  background: rgba(247, 247, 247, .1);\n  height: 100vh;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100vw;\n  z-index: 1;\n}\n\n#offline-resources {\n  display: none;\n}\n\n\n.arcade-mode,\n.arcade-mode .runner-container,\n.arcade-mode .runner-canvas {\n  image-rendering: -moz-crisp-edges;\n  image-rendering: -webkit-crisp-edges;\n  image-rendering: pixelated;\n  image-rendering: crisp-edges;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.arcade-mode #buttons,\n.arcade-mode #main-content {\n  opacity: 0;\n  overflow: hidden;\n}\n\n.arcade-mode .interstitial-wrapper {\n  height: 100vh;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.arcade-mode .runner-container {\n  image-rendering: -moz-crisp-edges;\n  image-rendering: -webkit-crisp-edges;\n  image-rendering: pixelated;\n  image-rendering: crisp-edges;\n  left: 0;\n  margin: auto;\n  right: 0;\n  transform-origin: top center;\n  transition: transform 250ms cubic-bezier(0.4, 0, 1, 1) 400ms;\n  z-index: 2;\n}\n\n\n@media (prefers-color-scheme: dark) {\n\t\n  body {\n\tbackground-color: #000;\n  }\n\n  .offline .runner-canvas {\n    filter: invert(1);\n  }\n\n  .offline.inverted {\n    background-color: #fff;\n    filter: invert(1);\n  }\n\n  .offline.inverted body {\n    background-color: #fff;\n  }\n\n  h1{filter: invert(1);}\n}\n\n@media (max-width: 420px) {\n  .suggested-left > #control-buttons, .suggested-right > #control-buttons {\n    float: none;\n  }\n  .snackbar {\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    border-radius: 0;\n  }\n}\n\n@media (max-height: 350px) {\n  h1 {\n    margin: 0 0 15px;\n  }\n  .icon-offline {\n    margin: 0 0 10px;\n  }\n  .interstitial-wrapper {\n    margin-top: 5%;\n  }\n  .nav-wrapper {\n    margin-top: 30px;\n  }\n}\n\n@media (min-width: 600px) and (max-width: 736px) and (orientation: landscape) {\n  .offline .interstitial-wrapper {\n    margin-left: 0;\n    margin-right: 0;\n  }\n}\n\n@media (min-width: 420px) and (max-width: 736px) and (min-height: 240px) and (max-height: 420px) and (orientation:landscape) {\n  .interstitial-wrapper {\n    margin-bottom: 100px;\n  }\n}\n\n@media (min-height: 240px) and (orientation: landscape) {\n  .offline .interstitial-wrapper {\n    margin-bottom: 90px;\n  }\n  .icon-offline {\n    margin-bottom: 20px;\n  }\n}\n\n@media (max-height: 320px) and (orientation: landscape) {\n  .icon-offline {\n    margin-bottom: 0;\n  }\n  .offline .runner-container {\n    top: 10px;\n  }\n}\n\n@media (max-width: 240px) {\n  .interstitial-wrapper {\n    overflow: inherit;\n    padding: 0 8px;\n  }\n}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:23.945Z",
        "time": 35.859999999956926,
        "timings": {
          "blocked": 2.0050000004074535,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 32.561999998380195,
          "receive": 1.2930000011692755,
          "_blocked_queueing": 2.0000000004074536
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://3kh0.github.io/projects/chrome-dino/index.html",
          "lineNumber": 14
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/projects/chrome-dino/game.js",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "x-fastly-request-id",
              "value": "26495d4c5d79f95fb6de34d7f24ba96cd5b3ac53"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:13:15 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "content-length",
              "value": "19636"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21935-LGA"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:56 GMT"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "x-github-request-id",
              "value": "0807:363B:C59905:107FC14:6354169B"
            },
            {
              "name": "x-timer",
              "value": "S1666455196.966018,VS0,VE13"
            },
            {
              "name": "etag",
              "value": "W/\"6351ed68-14c8b\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 16:23:15 GMT"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-origin-cache",
              "value": "HIT"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            }
          ],
          "cookies": [],
          "content": {
            "size": 85131,
            "mimeType": "application/javascript",
            "text": "// Copyright (c) 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/**\n * T-Rex runner.\n * @param {string} outerContainerId Outer containing element id.\n * @param {Object} opt_config\n * @constructor\n * @export\n */\nfunction _isIpad() {\n        var isIpad = navigator.userAgent.toLowerCase().indexOf('ipad') !== -1;\n\n        if (!isIpad && navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2) {\n            return true;\n        }\n\n        return isIpad;\n    }\n    \nfunction Runner(outerContainerId, opt_config) {\n    // Singleton\n    if(Runner.instance_) {\n        return Runner.instance_;\n    }\n    Runner.instance_ = this;\n\n    this.outerContainerEl = document.querySelector(outerContainerId);\n    this.containerEl = null;\n    this.snackbarEl = null;\n    // A div to intercept touch events. Only set while (playing && useTouch).\n    this.touchController = null;\n    this.detailsButton = this.outerContainerEl.querySelector('#details-button');\n\n    this.config = opt_config || Runner.config;\n\n    this.dimensions = Runner.defaultDimensions;\n\n    this.canvas = null;\n    this.canvasCtx = null;\n\n    this.tRex = null;\n\n    this.distanceMeter = null;\n    this.distanceRan = 0;\n\n    this.highestScore = window.localStorage.getItem(\"chrome-dino\");\n\n    this.time = 0;\n    this.runningTime = 0;\n    this.msPerFrame = 1000 / FPS;\n    this.currentSpeed = this.config.SPEED;\n\n    this.obstacles = [];\n\n    this.activated = false; // Whether the easter egg has been activated.\n    this.playing = false; // Whether the game is currently in play state.\n    this.crashed = false;\n    this.paused = false;\n    this.inverted = false;\n    this.invertTimer = 0;\n    this.resizeTimerId_ = null;\n\n    this.playCount = 0;\n\n    // Sound FX.\n    this.audioBuffer = null;\n    this.soundFx = {};\n\n    // Global web audio context for playing sounds.\n    this.audioContext = null;\n\n    // Images.\n    this.images = {};\n    this.imagesLoaded = 0;\n\t\n\t// Gamepad state.\n\tthis.pollingGamepads = false;\n\tthis.gamepadIndex = undefined;\n\tthis.previousGamepad = null;\n\n    if(this.isDisabled()) {\n        this.setupDisabledRunner();\n    } else {\n        this.loadImages();\n    }\n}\n\n\n/**\n * Default game width.\n * @const\n */\nvar DEFAULT_WIDTH = 600;\n\n/**\n * Frames per second.\n * @const\n */\nvar FPS = 60;\n\n/** @const */\nvar IS_HIDPI = window.devicePixelRatio > 1;\n\n/** @const */\nvar IS_IOS =  !!window.navigator.userAgent.match(/iP(hone|ad|od)/i) && !!window.navigator.userAgent.match(/Safari/i)\n     || _isIpad() || /CriOS/.test(window.navigator.userAgent) || /FxiOS/.test(window.navigator.userAgent);\n\n/** @const */\nvar IS_MOBILE = /Android/.test(window.navigator.userAgent) || IS_IOS;\n\n/** @const */\n// var IS_TOUCH_ENABLED = 'ontouchstart' in window;\n\n/**\n * Default game configuration.\n * @enum {number}\n */\nRunner.config = {\n    ACCELERATION: 0.001,\n    BG_CLOUD_SPEED: 0.2,\n    BOTTOM_PAD: 10,\n    CLEAR_TIME: 3000,\n    CLOUD_FREQUENCY: 0.5,\n    GAMEOVER_CLEAR_TIME: 1200,\n    GAP_COEFFICIENT: 0.6,\n    GRAVITY: 0.6,\n    INITIAL_JUMP_VELOCITY: 12,\n    INVERT_FADE_DURATION: 12000,\n    INVERT_DISTANCE: 700,\n    MAX_BLINK_COUNT: 3,\n    MAX_CLOUDS: 6,\n    MAX_OBSTACLE_LENGTH: 3,\n    MAX_OBSTACLE_DUPLICATION: 2,\n    MAX_SPEED: 13,\n    MIN_JUMP_HEIGHT: 35,\n    MOBILE_SPEED_COEFFICIENT: 1.2,\n    RESOURCE_TEMPLATE_ID: 'audio-resources',\n    SPEED: 6,\n    SPEED_DROP_COEFFICIENT: 3,\n    ARCADE_MODE_INITIAL_TOP_POSITION: 35,\n    ARCADE_MODE_TOP_POSITION_PERCENT: 0.1\n};\n\n\n/**\n * Default dimensions.\n * @enum {string}\n */\nRunner.defaultDimensions = {\n    WIDTH: DEFAULT_WIDTH,\n    HEIGHT: 150\n};\n\n\n/**\n * CSS class names.\n * @enum {string}\n */\nRunner.classes = {\n    ARCADE_MODE: 'arcade-mode',\n    CANVAS: 'runner-canvas',\n    CONTAINER: 'runner-container',\n    CRASHED: 'crashed',\n    ICON: 'icon-offline',\n    INVERTED: 'inverted',\n    SNACKBAR: 'snackbar',\n    SNACKBAR_SHOW: 'snackbar-show',\n    TOUCH_CONTROLLER: 'controller'\n};\n\n\n/**\n * Sprite definition layout of the spritesheet.\n * @enum {Object}\n */\nRunner.spriteDefinition = {\n    LDPI: {\n        CACTUS_LARGE: {\n            x: 332,\n            y: 2\n        },\n        CACTUS_SMALL: {\n            x: 228,\n            y: 2\n        },\n        CLOUD: {\n            x: 86,\n            y: 2\n        },\n        HORIZON: {\n            x: 2,\n            y: 54\n        },\n        MOON: {\n            x: 484,\n            y: 2\n        },\n        PTERODACTYL: {\n            x: 134,\n            y: 2\n        },\n        RESTART: {\n            x: 2,\n            y: 2\n        },\n        TEXT_SPRITE: {\n            x: 655,\n            y: 2\n        },\n        TREX: {\n            x: 848,\n            y: 2\n        },\n        STAR: {\n            x: 645,\n            y: 2\n        }\n    },\n    HDPI: {\n        CACTUS_LARGE: {\n            x: 652,\n            y: 2\n        },\n        CACTUS_SMALL: {\n            x: 446,\n            y: 2\n        },\n        CLOUD: {\n            x: 166,\n            y: 2\n        },\n        HORIZON: {\n            x: 2,\n            y: 104\n        },\n        MOON: {\n            x: 954,\n            y: 2\n        },\n        PTERODACTYL: {\n            x: 260,\n            y: 2\n        },\n        RESTART: {\n            x: 2,\n            y: 2\n        },\n        TEXT_SPRITE: {\n            x: 1294,\n            y: 2\n        },\n        TREX: {\n            x: 1678,\n            y: 2\n        },\n        STAR: {\n            x: 1276,\n            y: 2\n        }\n    }\n};\n\n\n/**\n * Sound FX. Reference to the ID of the audio tag on interstitial page.\n * @enum {string}\n */\nRunner.sounds = {\n    BUTTON_PRESS: 'offline-sound-press',\n    HIT: 'offline-sound-hit',\n    SCORE: 'offline-sound-reached'\n};\n\n\n/**\n * Key code mapping.\n * @enum {Object}\n */\nRunner.keycodes = {\n    JUMP: {\n        '38': 1,\n        '32': 1\n    }, // Up, spacebar\n    DUCK: {\n        '40': 1\n    }, // Down\n    RESTART: {\n        '13': 1\n    } // Enter\n};\n\n\n/**\n * Runner event names.\n * @enum {string}\n */\nRunner.events = {\n    ANIM_END: 'webkitAnimationEnd',\n    CLICK: 'click',\n    KEYDOWN: 'keydown',\n    KEYUP: 'keyup',\n    POINTERDOWN: 'pointerdown',\n    POINTERUP: 'pointerup',\n    RESIZE: 'resize',\n    TOUCHEND: 'touchend',\n    TOUCHSTART: 'touchstart',\n    VISIBILITY: 'visibilitychange',\n    BLUR: 'blur',\n    FOCUS: 'focus',\n    LOAD: 'load',\n\tGAMEPADCONNECTED: 'gamepadconnected',\n};\n\n\nRunner.prototype = {\n    /**\n     * Whether the easter egg has been disabled. CrOS enterprise enrolled devices.\n     * @return {boolean}\n     */\n    isDisabled: function() {\n        // return loadTimeData && loadTimeData.valueExists('disabledEasterEgg');\n        return false;\n    },\n\n    /**\n     * For disabled instances, set up a snackbar with the disabled message.\n     */\n    setupDisabledRunner: function() {\n        this.containerEl = document.createElement('div');\n        this.containerEl.className = Runner.classes.SNACKBAR;\n        this.containerEl.textContent = loadTimeData.getValue('disabledEasterEgg');\n        this.outerContainerEl.appendChild(this.containerEl);\n\n        // Show notification when the activation key is pressed.\n        document.addEventListener(Runner.events.KEYDOWN, function(e) {\n            if(Runner.keycodes.JUMP[e.keyCode]) {\n                this.containerEl.classList.add(Runner.classes.SNACKBAR_SHOW);\n                document.querySelector('.icon').classList.add('icon-disabled');\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Setting individual settings for debugging.\n     * @param {string} setting\n     * @param {*} value\n     */\n    updateConfigSetting: function(setting, value) {\n        if(setting in this.config && value != undefined) {\n            this.config[setting] = value;\n\n            switch(setting) {\n                case 'GRAVITY':\n                case 'MIN_JUMP_HEIGHT':\n                case 'SPEED_DROP_COEFFICIENT':\n                    this.tRex.config[setting] = value;\n                    break;\n                case 'INITIAL_JUMP_VELOCITY':\n                    this.tRex.setJumpVelocity(value);\n                    break;\n                case 'SPEED':\n                    this.setSpeed(value);\n                    break;\n            }\n        }\n    },\n\n    /**\n     * Cache the appropriate image sprite from the page and get the sprite sheet\n     * definition.\n     */\n    loadImages: function() {\n        if(IS_HIDPI) {\n            Runner.imageSprite = document.getElementById('offline-resources-2x');\n            this.spriteDef = Runner.spriteDefinition.HDPI;\n        } else {\n            Runner.imageSprite = document.getElementById('offline-resources-1x');\n            this.spriteDef = Runner.spriteDefinition.LDPI;\n        }\n\n        if(Runner.imageSprite.complete) {\n            this.init();\n        } else {\n            // If the images are not yet loaded, add a listener.\n            Runner.imageSprite.addEventListener(Runner.events.LOAD,\n                this.init.bind(this));\n        }\n    },\n\n    /**\n     * Load and decode base 64 encoded sounds.\n     */\n    loadSounds: function() {\n        if(!IS_IOS) {\n            this.audioContext = new AudioContext();\n\n            var resourceTemplate =\n                document.getElementById(this.config.RESOURCE_TEMPLATE_ID).content;\n\n            for(var sound in Runner.sounds) {\n                var soundSrc =\n                    resourceTemplate.getElementById(Runner.sounds[sound]).src;\n                soundSrc = soundSrc.substr(soundSrc.indexOf(',') + 1);\n                var buffer = decodeBase64ToArrayBuffer(soundSrc);\n\n                // Async, so no guarantee of order in array.\n                this.audioContext.decodeAudioData(buffer, function(index, audioData) {\n                    this.soundFx[index] = audioData;\n                }.bind(this, sound));\n            }\n        }\n    },\n\n    /**\n     * Sets the game speed. Adjust the speed accordingly if on a smaller screen.\n     * @param {number} opt_speed\n     */\n    setSpeed: function(opt_speed) {\n        var speed = opt_speed || this.currentSpeed;\n\n        // Reduce the speed on smaller mobile screens.\n        if(this.dimensions.WIDTH < DEFAULT_WIDTH) {\n            var mobileSpeed = speed * this.dimensions.WIDTH / DEFAULT_WIDTH *\n                this.config.MOBILE_SPEED_COEFFICIENT;\n            this.currentSpeed = mobileSpeed > speed ? speed : mobileSpeed;\n        } else if(opt_speed) {\n            this.currentSpeed = opt_speed;\n        }\n    },\n\n    /**\n     * Game initialiser.\n     */\n    init: function() {\n        // Hide the static icon.\n        document.querySelector('.' + Runner.classes.ICON).style.visibility =\n            'hidden';\n\n        this.adjustDimensions();\n        this.setSpeed();\n\n        this.containerEl = document.createElement('div');\n        this.containerEl.className = Runner.classes.CONTAINER;\n\n        // Player canvas container.\n        this.canvas = createCanvas(this.containerEl, this.dimensions.WIDTH,\n            this.dimensions.HEIGHT, Runner.classes.PLAYER);\n\n        this.canvasCtx = this.canvas.getContext('2d');\n        this.canvasCtx.fillStyle = '#f7f7f7';\n        this.canvasCtx.fill();\n        Runner.updateCanvasScaling(this.canvas);\n\n        // Horizon contains clouds, obstacles and the ground.\n        this.horizon = new Horizon(this.canvas, this.spriteDef, this.dimensions,\n            this.config.GAP_COEFFICIENT);\n\n        // Distance meter\n        this.distanceMeter = new DistanceMeter(this.canvas,\n            this.spriteDef.TEXT_SPRITE, this.dimensions.WIDTH);\n\n        // Draw t-rex\n        this.tRex = new Trex(this.canvas, this.spriteDef.TREX);\n\n        this.outerContainerEl.appendChild(this.containerEl);\n\n        if(IS_MOBILE) {\n            this.createTouchController();\n        }\n\n        this.startListening();\n        this.update();\n\n        window.addEventListener(Runner.events.RESIZE,\n            this.debounceResize.bind(this));\n\n        // Handle dark mode\n        const darkModeMediaQuery =\n            window.matchMedia('(prefers-color-scheme: dark)');\n        this.isDarkMode = darkModeMediaQuery && darkModeMediaQuery.matches;\n        darkModeMediaQuery.addListener((e) => {\n            this.isDarkMode = e.matches;\n        });\n    },\n\n    /**\n     * Create the touch controller. A div that covers whole screen.\n     */\n    createTouchController: function() {\n        this.touchController = document.createElement('div');\n        this.touchController.className = Runner.classes.TOUCH_CONTROLLER;\n        this.touchController.addEventListener(Runner.events.TOUCHSTART, this);\n        this.touchController.addEventListener(Runner.events.TOUCHEND, this);\n        this.outerContainerEl.appendChild(this.touchController);\n    },\n\n    /**\n     * Debounce the resize event.\n     */\n    debounceResize: function() {\n        if(!this.resizeTimerId_) {\n            this.resizeTimerId_ =\n                setInterval(this.adjustDimensions.bind(this), 250);\n        }\n    },\n\n    /**\n     * Adjust game space dimensions on resize.\n     */\n    adjustDimensions: function() {\n        clearInterval(this.resizeTimerId_);\n        this.resizeTimerId_ = null;\n\n        var boxStyles = window.getComputedStyle(this.outerContainerEl);\n        var padding = Number(boxStyles.paddingLeft.substr(0,\n            boxStyles.paddingLeft.length - 2));\n\n        this.dimensions.WIDTH = this.outerContainerEl.offsetWidth - padding * 2;\n        if(this.activated) {\n            this.dimensions.WIDTH = Math.min(DEFAULT_WIDTH, this.dimensions.WIDTH);\n            this.setArcadeModeContainerScale();\n        }\n\n        // Redraw the elements back onto the canvas.\n        if(this.canvas) {\n            this.canvas.width = this.dimensions.WIDTH;\n            this.canvas.height = this.dimensions.HEIGHT;\n\n            Runner.updateCanvasScaling(this.canvas);\n\n            this.distanceMeter.calcXPos(this.dimensions.WIDTH);\n            this.clearCanvas();\n            this.horizon.update(0, 0, true);\n            this.tRex.update(0);\n\n            // Outer container and distance meter.\n            if(this.playing || this.crashed || this.paused) {\n                this.containerEl.style.width = this.dimensions.WIDTH + 'px';\n                this.containerEl.style.height = this.dimensions.HEIGHT + 'px';\n                this.distanceMeter.update(0, Math.ceil(this.distanceRan));\n                this.stop();\n            } else {\n                this.tRex.draw(0, 0);\n            }\n\n            // Game over panel.\n            if(this.crashed && this.gameOverPanel) {\n                this.gameOverPanel.updateDimensions(this.dimensions.WIDTH);\n                this.gameOverPanel.draw();\n            }\n        }\n    },\n\n    /**\n     * Play the game intro.\n     * Canvas container width expands out to the full width.\n     */\n    playIntro: function() {\n        if(!this.activated && !this.crashed) {\n            this.playingIntro = true;\n            this.tRex.playingIntro = true;\n            this.distanceMeter.setHighScore(window.localStorage.getItem(\"chrome-dino\"));\n\n            // CSS animation definition.\n            var keyframes = '@-webkit-keyframes intro { ' +\n                'from { width:' + Trex.config.WIDTH + 'px }' +\n                'to { width: ' + this.dimensions.WIDTH + 'px }' +\n                '}';\n\n            // create a style sheet to put the keyframe rule in \n            // and then place the style sheet in the html head    \n            var sheet = document.createElement('style');\n            sheet.innerHTML = keyframes;\n            document.head.appendChild(sheet);\n\n            this.containerEl.addEventListener(Runner.events.ANIM_END,\n                this.startGame.bind(this));\n\n            this.containerEl.style.webkitAnimation = 'intro .4s ease-out 1 both';\n            this.containerEl.style.width = this.dimensions.WIDTH + 'px';\n\n            // if (this.touchController) {\n            //     this.outerContainerEl.appendChild(this.touchController);\n            // }\n            this.playing = true;\n            this.activated = true;\n        } else if(this.crashed) {\n            this.restart();\n        }\n    },\n\n\n    /**\n     * Update the game status to started.\n     */\n    startGame: function() {\n        this.setArcadeMode();\n        this.runningTime = 0;\n        this.playingIntro = false;\n        this.tRex.playingIntro = false;\n        this.containerEl.style.webkitAnimation = '';\n        this.playCount++;\n\n        // Handle tabbing off the page. Pause the current game.\n        document.addEventListener(Runner.events.VISIBILITY,\n            this.onVisibilityChange.bind(this));\n\n        window.addEventListener(Runner.events.BLUR,\n            this.onVisibilityChange.bind(this));\n\n        window.addEventListener(Runner.events.FOCUS,\n            this.onVisibilityChange.bind(this));\n    },\n\n    clearCanvas: function() {\n        this.canvasCtx.clearRect(0, 0, this.dimensions.WIDTH,\n            this.dimensions.HEIGHT);\n    },\n\n    /**\n     * Update the game frame and schedules the next one.\n     */\n    update: function() {\n        this.updatePending = false;\n\n        var now = getTimeStamp();\n        var deltaTime = now - (this.time || now);\n        this.time = now;\n\n        if(this.playing) {\n            this.clearCanvas();\n\n            if(this.tRex.jumping) {\n                this.tRex.updateJump(deltaTime);\n            }\n\n            this.runningTime += deltaTime;\n            var hasObstacles = this.runningTime > this.config.CLEAR_TIME;\n\n            // First jump triggers the intro.\n            if(this.tRex.jumpCount == 1 && !this.playingIntro) {\n                this.playIntro();\n            }\n\n            // The horizon doesn't move until the intro is over.\n            if(this.playingIntro) {\n                this.horizon.update(0, this.currentSpeed, hasObstacles);\n            } else if(!this.crashed) {\n                const showNightMode = this.isDarkMode ^ this.inverted;\n                deltaTime = !this.activated ? 0 : deltaTime;\n                this.horizon.update(deltaTime, this.currentSpeed, hasObstacles,\n                    showNightMode);\n            }\n\n            // Check for collisions.\n            var collision = hasObstacles &&\n                checkForCollision(this.horizon.obstacles[0], this.tRex);\n\n            if(!collision) {\n                this.distanceRan += this.currentSpeed * deltaTime / this.msPerFrame;\n\n                if(this.currentSpeed < this.config.MAX_SPEED) {\n                    this.currentSpeed += this.config.ACCELERATION;\n                }\n            } else {\n                this.gameOver();\n            }\n\n            var playAchievementSound = this.distanceMeter.update(deltaTime,\n                Math.ceil(this.distanceRan));\n\n            if(playAchievementSound) {\n                this.playSound(this.soundFx.SCORE);\n            }\n\n            // Night mode.\n            if(this.invertTimer > this.config.INVERT_FADE_DURATION) {\n                this.invertTimer = 0;\n                this.invertTrigger = false;\n                this.invert();\n            } else if(this.invertTimer) {\n                this.invertTimer += deltaTime;\n            } else {\n                var actualDistance =\n                    this.distanceMeter.getActualDistance(Math.ceil(this.distanceRan));\n\n                if(actualDistance > 0) {\n                    this.invertTrigger = !(actualDistance %\n                        this.config.INVERT_DISTANCE);\n\n                    if(this.invertTrigger && this.invertTimer === 0) {\n                        this.invertTimer += deltaTime;\n                        this.invert();\n                    }\n                }\n            }\n        }\n\n        if(this.playing || (!this.activated &&\n                this.tRex.blinkCount < Runner.config.MAX_BLINK_COUNT)) {\n            this.tRex.update(deltaTime);\n            this.scheduleNextUpdate();\n        }\n    },\n\n    /**\n     * Event handler.\n     */\n    handleEvent: function(e) {\n        return (function(evtType, events) {\n            switch(evtType) {\n                case events.KEYDOWN:\n                case events.TOUCHSTART:\n                case events.POINTERDOWN:\n                    this.onKeyDown(e);\n                    break;\n                case events.KEYUP:\n                case events.TOUCHEND:\n                case events.POINTERUP:\n                    this.onKeyUp(e);\n                    break;\n\t\t\t\tcase events.GAMEPADCONNECTED:\n\t\t\t\t    this.onGamepadConnected(e);\n\t\t\t\t\tbreak;\n            }\n        }.bind(this))(e.type, Runner.events);\n    },\n\n    /**\n     * Bind relevant key / mouse / touch listeners.\n     */\n    startListening: function() {\n        // Keys.\n        document.addEventListener(Runner.events.KEYDOWN, this);\n        document.addEventListener(Runner.events.KEYUP, this);\n\t\t\n\t\t// Gamepad\n\t\twindow.addEventListener(Runner.events.GAMEPADCONNECTED, this);\n        \n        // Touch / pointer.\n        this.containerEl.addEventListener(Runner.events.TOUCHSTART, this);\n        document.addEventListener(Runner.events.POINTERDOWN, this);\n        document.addEventListener(Runner.events.POINTERUP, this);\n    },\n\n    /**\n     * Remove all listeners.\n     */\n    stopListening: function() {\n        document.removeEventListener(Runner.events.KEYDOWN, this);\n        document.removeEventListener(Runner.events.KEYUP, this);\n\t\t\n\t\twindow.removeEventListener(Runner.events.GAMEPADCONNECTED, this);\n\n        if (this.touchController) {\n            this.touchController.removeEventListener(Runner.events.TOUCHSTART, this);\n            this.touchController.removeEventListener(Runner.events.TOUCHEND, this);\n        }\n            \n        this.containerEl.removeEventListener(Runner.events.TOUCHSTART, this);\n        document.removeEventListener(Runner.events.POINTERDOWN, this);\n        document.removeEventListener(Runner.events.POINTERUP, this);\n    },\n\n    /**\n     * Process keydown.\n     * @param {Event} e\n     */\n    onKeyDown: function(e) {\n        // Prevent native page scrolling whilst tapping on mobile.\n        if(IS_MOBILE && this.playing) {\n            e.preventDefault();\n        }\n\n        if(e.target != this.detailsButton) {\n            if(!this.crashed && (Runner.keycodes.JUMP[e.keyCode] ||\n                    e.type == Runner.events.TOUCHSTART)) {\n                if(!this.playing) {\n                    this.loadSounds();\n                    this.playing = true;\n                    this.update();\n                    if(window.errorPageController) {\n                        errorPageController.trackEasterEgg();\n                    }\n                }\n                //  Play sound effect and jump on starting the game for the first time.\n                if(!this.tRex.jumping && !this.tRex.ducking) {\n                    this.playSound(this.soundFx.BUTTON_PRESS);\n                    this.tRex.startJump(this.currentSpeed);\n                }\n            }\n\n            if(this.crashed && e.type == Runner.events.TOUCHSTART &&\n                e.currentTarget == this.containerEl) {\n                this.restart();\n            }\n        }\n\n        if(this.playing && !this.crashed && Runner.keycodes.DUCK[e.keyCode]) {\n            e.preventDefault();\n            if(this.tRex.jumping) {\n                // Speed drop, activated only when jump key is not pressed.\n                this.tRex.setSpeedDrop();\n            } else if(!this.tRex.jumping && !this.tRex.ducking) {\n                // Duck.\n                this.tRex.setDuck(true);\n            }\n        }\n    },\n\n\n    /**\n     * Process key up.\n     * @param {Event} e\n     */\n    onKeyUp: function(e) {\n        var keyCode = String(e.keyCode);\n        var isjumpKey = Runner.keycodes.JUMP[keyCode] ||\n            e.type == Runner.events.TOUCHEND ||\n            e.type == Runner.events.POINTERUP;\n\n        if(this.isRunning() && isjumpKey) {\n            this.tRex.endJump();\n        } else if(Runner.keycodes.DUCK[keyCode]) {\n            this.tRex.speedDrop = false;\n            this.tRex.setDuck(false);\n        } else if(this.crashed) {\n            // Check that enough time has elapsed before allowing jump key to restart.\n            var deltaTime = getTimeStamp() - this.time;\n\n            if(Runner.keycodes.RESTART[keyCode] || this.isLeftClickOnCanvas(e) ||\n                (deltaTime >= this.config.GAMEOVER_CLEAR_TIME &&\n                    Runner.keycodes.JUMP[keyCode])) {\n                this.restart();\n            }\n        } else if(this.paused && isjumpKey) {\n            // Reset the jump state\n            this.tRex.reset();\n            this.play();\n        }\n    },\n\t\n\t  /**\n   * Process gamepad connected event.\n   * @param {Event} e\n   */\n  onGamepadConnected: function(e) {\n    if (!this.pollingGamepads) {\n      this.pollGamepadState();\n    }\n  },\n\n  /**\n   * rAF loop for gamepad polling.\n   */\n  pollGamepadState: function() {\n    var gamepads = navigator.getGamepads();\n    this.pollActiveGamepad(gamepads);\n\n    this.pollingGamepads = true;\n    requestAnimationFrame(this.pollGamepadState.bind(this));\n  },\n\n  /**\n   * Polls for a gamepad with the jump button pressed. If one is found this\n   * becomes the \"active\" gamepad and all others are ignored.\n   * @param {!Array<Gamepad>} gamepads\n   */\n  pollForActiveGamepad: function(gamepads) {\n    for (var i = 0; i < gamepads.length; ++i) {\n      if (gamepads[i] && gamepads[i].buttons.length > 0 &&\n          gamepads[i].buttons[0].pressed) {\n        this.gamepadIndex = i;\n        this.pollActiveGamepad(gamepads);\n        return;\n      }\n    }\n  },\n\n  /**\n   * Polls the chosen gamepad for button presses and generates KeyboardEvents\n   * to integrate with the rest of the game logic.\n   * @param {!Array<Gamepad>} gamepads\n   */\n  pollActiveGamepad: function(gamepads) {\n    if (this.gamepadIndex === undefined) {\n      this.pollForActiveGamepad(gamepads);\n      return;\n    }\n\n    var gamepad = gamepads[this.gamepadIndex];\n    if (!gamepad) {\n      this.gamepadIndex = undefined;\n      this.pollForActiveGamepad(gamepads);\n      return;\n    }\n\n    // The gamepad specification defines the typical mapping of physical buttons\n    // to button indicies: https://w3c.github.io/gamepad/#remapping\n    this.pollGamepadButton(gamepad, 0, 38);  // Jump\n    if (gamepad.buttons.length >= 2) {\n      this.pollGamepadButton(gamepad, 1, 40);  // Duck\n    }\n    if (gamepad.buttons.length >= 10) {\n      this.pollGamepadButton(gamepad, 9, 13);  // Restart\n    }\n\n    this.previousGamepad = gamepad;\n  },\n\n  /**\n   * Generates a key event based on a gamepad button.\n   * @param {!Gamepad} gamepad\n   * @param {number} buttonIndex\n   * @param {number} keyCode\n   */\n  pollGamepadButton: function(gamepad, buttonIndex, keyCode) {\n    var state = gamepad.buttons[buttonIndex].pressed;\n    var previousState = false;\n    if (this.previousGamepad) {\n      previousState = this.previousGamepad.buttons[buttonIndex].pressed;\n    }\n    // Generate key events on the rising and falling edge of a button press.\n    if (state != previousState) {\n      var e = new KeyboardEvent(state ? Runner.events.KEYDOWN\n                                      : Runner.events.KEYUP,\n                                { keyCode: keyCode });\n      document.dispatchEvent(e);\n    }\n  },\n\t\n    /**\n     * Returns whether the event was a left click on canvas.\n     * On Windows right click is registered as a click.\n     * @param {Event} e\n     * @return {boolean}\n     */\n    isLeftClickOnCanvas: function(e) {\n        return e.button != null && e.button < 2 &&\n            e.type == Runner.events.POINTERUP && e.target == this.canvas;\n    },\n\n    /**\n     * RequestAnimationFrame wrapper.\n     */\n    scheduleNextUpdate: function() {\n        if(!this.updatePending) {\n            this.updatePending = true;\n            this.raqId = requestAnimationFrame(this.update.bind(this));\n        }\n    },\n\n    /**\n     * Whether the game is running.\n     * @return {boolean}\n     */\n    isRunning: function() {\n        return !!this.raqId;\n    },\n    \n    /**\n     * Game over state.\n     */\n    gameOver: function() {\n        this.playSound(this.soundFx.HIT);\n        vibrate(200);\n\n        this.stop();\n        this.crashed = true;\n        this.distanceMeter.achievement = false;\n\n        this.tRex.update(100, Trex.status.CRASHED);\n\n        // Game over panel.\n        if(!this.gameOverPanel) {\n            this.gameOverPanel = new GameOverPanel(this.canvas,\n                this.spriteDef.TEXT_SPRITE, this.spriteDef.RESTART,\n                this.dimensions);\n        } else {\n            this.gameOverPanel.draw();\n        }\n\n        // Update the high score.\n        if (this.distanceRan > this.highestScore) {\n            this.highestScore = Math.ceil(this.distanceRan);\n            this.distanceMeter.setHighScore(this.highestScore);\n            window.localStorage.setItem('chrome-dino', this.highestScore);\n        }\n\n        // Reset the time clock.\n        this.time = getTimeStamp();\n    },\n\n    stop: function() {\n        this.playing = false;\n        this.paused = true;\n        cancelAnimationFrame(this.raqId);\n        this.raqId = 0;\n    },\n\n    play: function() {\n        if(!this.crashed) {\n            this.playing = true;\n            this.paused = false;\n            this.tRex.update(0, Trex.status.RUNNING);\n            this.time = getTimeStamp();\n            this.update();\n        }\n    },\n\n    restart: function() {\n        if(!this.raqId) {\n            this.playCount++;\n            this.runningTime = 0;\n            this.playing = true;\n            this.crashed = false;\n            this.distanceRan = 0;\n            this.setSpeed(this.config.SPEED);\n            this.time = getTimeStamp();\n            this.containerEl.classList.remove(Runner.classes.CRASHED);\n            this.clearCanvas();\n            this.distanceMeter.reset();\n            this.horizon.reset();\n            this.tRex.reset();\n            this.playSound(this.soundFx.BUTTON_PRESS);\n            this.invert(true);\n            this.update();\n        }\n    },\n\n    setArcadeMode() {\n        document.body.classList.add(Runner.classes.ARCADE_MODE);\n        this.setArcadeModeContainerScale();\n    },\n\n    /**\n     * Sets the scaling for arcade mode.\n     */\n    setArcadeModeContainerScale() {\n        const windowHeight = window.innerHeight;\n        const scaleHeight = windowHeight / this.dimensions.HEIGHT;\n        const scaleWidth = window.innerWidth / this.dimensions.WIDTH;\n        const scale = Math.max(1, Math.min(scaleHeight, scaleWidth));\n        const scaledCanvasHeight = this.dimensions.HEIGHT * scale;\n        // Positions the game container at 10% of the available vertical window\n        // height minus the game container height.\n        const translateY = Math.ceil(Math.max(0, (windowHeight - scaledCanvasHeight -\n                    Runner.config.ARCADE_MODE_INITIAL_TOP_POSITION) *\n                Runner.config.ARCADE_MODE_TOP_POSITION_PERCENT)) *\n            window.devicePixelRatio;\n\n        this.containerEl.style.transform =\n            'scale(' + scale + ') translateY(' + translateY + 'px)';\n    },\n\n    /**\n     * Pause the game if the tab is not in focus.\n     */\n    onVisibilityChange: function(e) {\n        if(document.hidden || document.webkitHidden || e.type == 'blur' ||\n            document.visibilityState != 'visible') {\n            this.stop();\n        } else if(!this.crashed) {\n            this.tRex.reset();\n            this.play();\n        }\n    },\n\n    /**\n     * Play a sound.\n     * @param {SoundBuffer} soundBuffer\n     */\n    playSound: function(soundBuffer) {\n        if(soundBuffer) {\n            var sourceNode = this.audioContext.createBufferSource();\n            sourceNode.buffer = soundBuffer;\n            sourceNode.connect(this.audioContext.destination);\n            sourceNode.start(0);\n        }\n    },\n\n    /**\n     * Inverts the current page / canvas colors.\n     * @param {boolean} Whether to reset colors.\n     */\n    invert: function(reset) {\n        if(reset) {\n            document.body.classList.toggle(Runner.classes.INVERTED, false);\n            this.invertTimer = 0;\n            this.inverted = false;\n        } else {\n            this.inverted = document.body.classList.toggle(Runner.classes.INVERTED,\n                this.invertTrigger);\n        }\n    }\n};\n\n\n/**\n * Updates the canvas size taking into\n * account the backing store pixel ratio and\n * the device pixel ratio.\n *\n * See article by Paul Lewis:\n * http://www.html5rocks.com/en/tutorials/canvas/hidpi/\n *\n * @param {HTMLCanvasElement} canvas\n * @param {number} opt_width\n * @param {number} opt_height\n * @return {boolean} Whether the canvas was scaled.\n */\nRunner.updateCanvasScaling = function(canvas, opt_width, opt_height) {\n    var context = canvas.getContext('2d');\n\n    // Query the various pixel ratios\n    var devicePixelRatio = Math.floor(window.devicePixelRatio) || 1;\n    var backingStoreRatio = Math.floor(context.webkitBackingStorePixelRatio) || 1;\n    var ratio = devicePixelRatio / backingStoreRatio;\n\n    // Upscale the canvas if the two ratios don't match\n    if(devicePixelRatio !== backingStoreRatio) {\n        var oldWidth = opt_width || canvas.width;\n        var oldHeight = opt_height || canvas.height;\n\n        canvas.width = oldWidth * ratio;\n        canvas.height = oldHeight * ratio;\n\n        canvas.style.width = oldWidth + 'px';\n        canvas.style.height = oldHeight + 'px';\n\n        // Scale the context to counter the fact that we've manually scaled\n        // our canvas element.\n        context.scale(ratio, ratio);\n        return true;\n    } else if(devicePixelRatio == 1) {\n        // Reset the canvas width / height. Fixes scaling bug when the page is\n        // zoomed and the devicePixelRatio changes accordingly.\n        canvas.style.width = canvas.width + 'px';\n        canvas.style.height = canvas.height + 'px';\n    }\n    return false;\n};\n\n\n/**\n * Get random number.\n * @param {number} min\n * @param {number} max\n * @param {number}\n */\nfunction getRandomNum(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\n/**\n * Vibrate on mobile devices.\n * @param {number} duration Duration of the vibration in milliseconds.\n */\nfunction vibrate(duration) {\n    if(IS_MOBILE && window.navigator.vibrate) {\n        window.navigator.vibrate(duration);\n    }\n}\n\n\n/**\n * Create canvas element.\n * @param {HTMLElement} container Element to append canvas to.\n * @param {number} width\n * @param {number} height\n * @param {string} opt_classname\n * @return {HTMLCanvasElement}\n */\nfunction createCanvas(container, width, height, opt_classname) {\n    var canvas = document.createElement('canvas');\n    canvas.className = opt_classname ? Runner.classes.CANVAS + ' ' +\n        opt_classname : Runner.classes.CANVAS;\n    canvas.width = width;\n    canvas.height = height;\n    container.appendChild(canvas);\n\n    return canvas;\n}\n\n\n/**\n * Decodes the base 64 audio to ArrayBuffer used by Web Audio.\n * @param {string} base64String\n */\nfunction decodeBase64ToArrayBuffer(base64String) {\n    var len = (base64String.length / 4) * 3;\n    var str = atob(base64String);\n    var arrayBuffer = new ArrayBuffer(len);\n    var bytes = new Uint8Array(arrayBuffer);\n\n    for(var i = 0; i < len; i++) {\n        bytes[i] = str.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\n\n\n/**\n * Return the current timestamp.\n * @return {number}\n */\nfunction getTimeStamp() {\n    return IS_IOS ? new Date().getTime() : performance.now();\n}\n\n\n//******************************************************************************\n\n\n/**\n * Game over panel.\n * @param {!HTMLCanvasElement} canvas\n * @param {Object} textImgPos\n * @param {Object} restartImgPos\n * @param {!Object} dimensions Canvas dimensions.\n * @constructor\n */\nfunction GameOverPanel(canvas, textImgPos, restartImgPos, dimensions) {\n    this.canvas = canvas;\n    this.canvasCtx = canvas.getContext('2d');\n    this.canvasDimensions = dimensions;\n    this.textImgPos = textImgPos;\n    this.restartImgPos = restartImgPos;\n    this.draw();\n}\n\n\n/**\n * Dimensions used in the panel.\n * @enum {number}\n */\nGameOverPanel.dimensions = {\n    TEXT_X: 0,\n    TEXT_Y: 13,\n    TEXT_WIDTH: 191,\n    TEXT_HEIGHT: 11,\n    RESTART_WIDTH: 36,\n    RESTART_HEIGHT: 32\n};\n\n\nGameOverPanel.prototype = {\n    /**\n     * Update the panel dimensions.\n     * @param {number} width New canvas width.\n     * @param {number} opt_height Optional new canvas height.\n     */\n    updateDimensions: function(width, opt_height) {\n        this.canvasDimensions.WIDTH = width;\n        if(opt_height) {\n            this.canvasDimensions.HEIGHT = opt_height;\n        }\n    },\n\n    /**\n     * Draw the panel.\n     */\n    draw: function() {\n        var dimensions = GameOverPanel.dimensions;\n\n        var centerX = this.canvasDimensions.WIDTH / 2;\n\n        // Game over text.\n        var textSourceX = dimensions.TEXT_X;\n        var textSourceY = dimensions.TEXT_Y;\n        var textSourceWidth = dimensions.TEXT_WIDTH;\n        var textSourceHeight = dimensions.TEXT_HEIGHT;\n\n        var textTargetX = Math.round(centerX - (dimensions.TEXT_WIDTH / 2));\n        var textTargetY = Math.round((this.canvasDimensions.HEIGHT - 25) / 3);\n        var textTargetWidth = dimensions.TEXT_WIDTH;\n        var textTargetHeight = dimensions.TEXT_HEIGHT;\n\n        var restartSourceWidth = dimensions.RESTART_WIDTH;\n        var restartSourceHeight = dimensions.RESTART_HEIGHT;\n        var restartTargetX = centerX - (dimensions.RESTART_WIDTH / 2);\n        var restartTargetY = this.canvasDimensions.HEIGHT / 2;\n\n        if(IS_HIDPI) {\n            textSourceY *= 2;\n            textSourceX *= 2;\n            textSourceWidth *= 2;\n            textSourceHeight *= 2;\n            restartSourceWidth *= 2;\n            restartSourceHeight *= 2;\n        }\n\n        textSourceX += this.textImgPos.x;\n        textSourceY += this.textImgPos.y;\n\n        // Game over text from sprite.\n        this.canvasCtx.drawImage(Runner.imageSprite,\n            textSourceX, textSourceY, textSourceWidth, textSourceHeight,\n            textTargetX, textTargetY, textTargetWidth, textTargetHeight);\n\n        // Restart button.\n        this.canvasCtx.drawImage(Runner.imageSprite,\n            this.restartImgPos.x, this.restartImgPos.y,\n            restartSourceWidth, restartSourceHeight,\n            restartTargetX, restartTargetY, dimensions.RESTART_WIDTH,\n            dimensions.RESTART_HEIGHT);\n    }\n};\n\n\n//******************************************************************************\n\n/**\n * Check for a collision.\n * @param {!Obstacle} obstacle\n * @param {!Trex} tRex T-rex object.\n * @param {HTMLCanvasContext} opt_canvasCtx Optional canvas context for drawing\n *    collision boxes.\n * @return {Array<CollisionBox>}\n */\nfunction checkForCollision(obstacle, tRex, opt_canvasCtx) {\n    var obstacleBoxXPos = Runner.defaultDimensions.WIDTH + obstacle.xPos;\n\n    // Adjustments are made to the bounding box as there is a 1 pixel white\n    // border around the t-rex and obstacles.\n    var tRexBox = new CollisionBox(\n        tRex.xPos + 1,\n        tRex.yPos + 1,\n        tRex.config.WIDTH - 2,\n        tRex.config.HEIGHT - 2);\n\n    var obstacleBox = new CollisionBox(\n        obstacle.xPos + 1,\n        obstacle.yPos + 1,\n        obstacle.typeConfig.width * obstacle.size - 2,\n        obstacle.typeConfig.height - 2);\n\n    // Debug outer box\n    if(opt_canvasCtx) {\n        drawCollisionBoxes(opt_canvasCtx, tRexBox, obstacleBox);\n    }\n\n    // Simple outer bounds check.\n    if(boxCompare(tRexBox, obstacleBox)) {\n        var collisionBoxes = obstacle.collisionBoxes;\n        var tRexCollisionBoxes = tRex.ducking ?\n            Trex.collisionBoxes.DUCKING : Trex.collisionBoxes.RUNNING;\n\n        // Detailed axis aligned box check.\n        for(var t = 0; t < tRexCollisionBoxes.length; t++) {\n            for(var i = 0; i < collisionBoxes.length; i++) {\n                // Adjust the box to actual positions.\n                var adjTrexBox =\n                    createAdjustedCollisionBox(tRexCollisionBoxes[t], tRexBox);\n                var adjObstacleBox =\n                    createAdjustedCollisionBox(collisionBoxes[i], obstacleBox);\n                var crashed = boxCompare(adjTrexBox, adjObstacleBox);\n\n                // Draw boxes for debug.\n                if(opt_canvasCtx) {\n                    drawCollisionBoxes(opt_canvasCtx, adjTrexBox, adjObstacleBox);\n                }\n\n                if(crashed) {\n                    return [adjTrexBox, adjObstacleBox];\n                }\n            }\n        }\n    }\n    return false;\n}\n\n\n/**\n * Adjust the collision box.\n * @param {!CollisionBox} box The original box.\n * @param {!CollisionBox} adjustment Adjustment box.\n * @return {CollisionBox} The adjusted collision box object.\n */\nfunction createAdjustedCollisionBox(box, adjustment) {\n    return new CollisionBox(\n        box.x + adjustment.x,\n        box.y + adjustment.y,\n        box.width,\n        box.height);\n}\n\n\n/**\n * Draw the collision boxes for debug.\n */\nfunction drawCollisionBoxes(canvasCtx, tRexBox, obstacleBox) {\n    canvasCtx.save();\n    canvasCtx.strokeStyle = '#f00';\n    canvasCtx.strokeRect(tRexBox.x, tRexBox.y, tRexBox.width, tRexBox.height);\n\n    canvasCtx.strokeStyle = '#0f0';\n    canvasCtx.strokeRect(obstacleBox.x, obstacleBox.y,\n        obstacleBox.width, obstacleBox.height);\n    canvasCtx.restore();\n}\n\n\n/**\n * Compare two collision boxes for a collision.\n * @param {CollisionBox} tRexBox\n * @param {CollisionBox} obstacleBox\n * @return {boolean} Whether the boxes intersected.\n */\nfunction boxCompare(tRexBox, obstacleBox) {\n    var crashed = false;\n    var tRexBoxX = tRexBox.x;\n    var tRexBoxY = tRexBox.y;\n\n    var obstacleBoxX = obstacleBox.x;\n    var obstacleBoxY = obstacleBox.y;\n\n    // Axis-Aligned Bounding Box method.\n    if(tRexBox.x < obstacleBoxX + obstacleBox.width &&\n        tRexBox.x + tRexBox.width > obstacleBoxX &&\n        tRexBox.y < obstacleBox.y + obstacleBox.height &&\n        tRexBox.height + tRexBox.y > obstacleBox.y) {\n        crashed = true;\n    }\n\n    return crashed;\n}\n\n\n//******************************************************************************\n\n/**\n * Collision box object.\n * @param {number} x X position.\n * @param {number} y Y Position.\n * @param {number} w Width.\n * @param {number} h Height.\n */\nfunction CollisionBox(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n}\n\n\n//******************************************************************************\n\n/**\n * Obstacle.\n * @param {HTMLCanvasCtx} canvasCtx\n * @param {Obstacle.type} type\n * @param {Object} spritePos Obstacle position in sprite.\n * @param {Object} dimensions\n * @param {number} gapCoefficient Mutipler in determining the gap.\n * @param {number} speed\n * @param {number} opt_xOffset\n */\nfunction Obstacle(canvasCtx, type, spriteImgPos, dimensions,\n    gapCoefficient, speed, opt_xOffset) {\n\n    this.canvasCtx = canvasCtx;\n    this.spritePos = spriteImgPos;\n    this.typeConfig = type;\n    this.gapCoefficient = gapCoefficient;\n    this.size = getRandomNum(1, Obstacle.MAX_OBSTACLE_LENGTH);\n    this.dimensions = dimensions;\n    this.remove = false;\n    this.xPos = dimensions.WIDTH + (opt_xOffset || 0);\n    this.yPos = 0;\n    this.width = 0;\n    this.collisionBoxes = [];\n    this.gap = 0;\n    this.speedOffset = 0;\n\n    // For animated obstacles.\n    this.currentFrame = 0;\n    this.timer = 0;\n\n    this.init(speed);\n}\n\n/**\n * Coefficient for calculating the maximum gap.\n * @const\n */\nObstacle.MAX_GAP_COEFFICIENT = 1.5;\n\n/**\n * Maximum obstacle grouping count.\n * @const\n */\nObstacle.MAX_OBSTACLE_LENGTH = 3,\n\n\n    Obstacle.prototype = {\n        /**\n         * Initialise the DOM for the obstacle.\n         * @param {number} speed\n         */\n        init: function(speed) {\n            this.cloneCollisionBoxes();\n\n            // Only allow sizing if we're at the right speed.\n            if(this.size > 1 && this.typeConfig.multipleSpeed > speed) {\n                this.size = 1;\n            }\n\n            this.width = this.typeConfig.width * this.size;\n\n            // Check if obstacle can be positioned at various heights.\n            if(Array.isArray(this.typeConfig.yPos)) {\n                var yPosConfig = IS_MOBILE ? this.typeConfig.yPosMobile :\n                    this.typeConfig.yPos;\n                this.yPos = yPosConfig[getRandomNum(0, yPosConfig.length - 1)];\n            } else {\n                this.yPos = this.typeConfig.yPos;\n            }\n\n            this.draw();\n\n            // Make collision box adjustments,\n            // Central box is adjusted to the size as one box.\n            //      ____        ______        ________\n            //    _|   |-|    _|     |-|    _|       |-|\n            //   | |<->| |   | |<--->| |   | |<----->| |\n            //   | | 1 | |   | |  2  | |   | |   3   | |\n            //   |_|___|_|   |_|_____|_|   |_|_______|_|\n            //\n            if(this.size > 1) {\n                this.collisionBoxes[1].width = this.width - this.collisionBoxes[0].width -\n                    this.collisionBoxes[2].width;\n                this.collisionBoxes[2].x = this.width - this.collisionBoxes[2].width;\n            }\n\n            // For obstacles that go at a different speed from the horizon.\n            if(this.typeConfig.speedOffset) {\n                this.speedOffset = Math.random() > 0.5 ? this.typeConfig.speedOffset :\n                    -this.typeConfig.speedOffset;\n            }\n\n            this.gap = this.getGap(this.gapCoefficient, speed);\n        },\n\n        /**\n         * Draw and crop based on size.\n         */\n        draw: function() {\n            var sourceWidth = this.typeConfig.width;\n            var sourceHeight = this.typeConfig.height;\n\n            if(IS_HIDPI) {\n                sourceWidth = sourceWidth * 2;\n                sourceHeight = sourceHeight * 2;\n            }\n\n            // X position in sprite.\n            var sourceX = (sourceWidth * this.size) * (0.5 * (this.size - 1)) +\n                this.spritePos.x;\n\n            // Animation frames.\n            if(this.currentFrame > 0) {\n                sourceX += sourceWidth * this.currentFrame;\n            }\n\n            this.canvasCtx.drawImage(Runner.imageSprite,\n                sourceX, this.spritePos.y,\n                sourceWidth * this.size, sourceHeight,\n                this.xPos, this.yPos,\n                this.typeConfig.width * this.size, this.typeConfig.height);\n        },\n\n        /**\n         * Obstacle frame update.\n         * @param {number} deltaTime\n         * @param {number} speed\n         */\n        update: function(deltaTime, speed) {\n            if(!this.remove) {\n                if(this.typeConfig.speedOffset) {\n                    speed += this.speedOffset;\n                }\n                this.xPos -= Math.floor((speed * FPS / 1000) * deltaTime);\n\n                // Update frame\n                if(this.typeConfig.numFrames) {\n                    this.timer += deltaTime;\n                    if(this.timer >= this.typeConfig.frameRate) {\n                        this.currentFrame =\n                            this.currentFrame == this.typeConfig.numFrames - 1 ?\n                            0 : this.currentFrame + 1;\n                        this.timer = 0;\n                    }\n                }\n                this.draw();\n\n                if(!this.isVisible()) {\n                    this.remove = true;\n                }\n            }\n        },\n\n        /**\n         * Calculate a random gap size.\n         * - Minimum gap gets wider as speed increses\n         * @param {number} gapCoefficient\n         * @param {number} speed\n         * @return {number} The gap size.\n         */\n        getGap: function(gapCoefficient, speed) {\n            var minGap = Math.round(this.width * speed +\n                this.typeConfig.minGap * gapCoefficient);\n            var maxGap = Math.round(minGap * Obstacle.MAX_GAP_COEFFICIENT);\n            return getRandomNum(minGap, maxGap);\n        },\n\n        /**\n         * Check if obstacle is visible.\n         * @return {boolean} Whether the obstacle is in the game area.\n         */\n        isVisible: function() {\n            return this.xPos + this.width > 0;\n        },\n\n        /**\n         * Make a copy of the collision boxes, since these will change based on\n         * obstacle type and size.\n         */\n        cloneCollisionBoxes: function() {\n            var collisionBoxes = this.typeConfig.collisionBoxes;\n\n            for(var i = collisionBoxes.length - 1; i >= 0; i--) {\n                this.collisionBoxes[i] = new CollisionBox(collisionBoxes[i].x,\n                    collisionBoxes[i].y, collisionBoxes[i].width,\n                    collisionBoxes[i].height);\n            }\n        }\n    };\n\n\n/**\n * Obstacle definitions.\n * minGap: minimum pixel space betweeen obstacles.\n * multipleSpeed: Speed at which multiples are allowed.\n * speedOffset: speed faster / slower than the horizon.\n * minSpeed: Minimum speed which the obstacle can make an appearance.\n */\nObstacle.types = [{\n        type: 'CACTUS_SMALL',\n        width: 17,\n        height: 35,\n        yPos: 105,\n        multipleSpeed: 4,\n        minGap: 120,\n        minSpeed: 0,\n        collisionBoxes: [\n            new CollisionBox(0, 7, 5, 27),\n            new CollisionBox(4, 0, 6, 34),\n            new CollisionBox(10, 4, 7, 14)\n        ]\n    },\n    {\n        type: 'CACTUS_LARGE',\n        width: 25,\n        height: 50,\n        yPos: 90,\n        multipleSpeed: 7,\n        minGap: 120,\n        minSpeed: 0,\n        collisionBoxes: [\n            new CollisionBox(0, 12, 7, 38),\n            new CollisionBox(8, 0, 7, 49),\n            new CollisionBox(13, 10, 10, 38)\n        ]\n    },\n    {\n        type: 'PTERODACTYL',\n        width: 46,\n        height: 40,\n        yPos: [100, 75, 50], // Variable height.\n        yPosMobile: [100, 50], // Variable height mobile.\n        multipleSpeed: 999,\n        minSpeed: 8.5,\n        minGap: 150,\n        collisionBoxes: [\n            new CollisionBox(15, 15, 16, 5),\n            new CollisionBox(18, 21, 24, 6),\n            new CollisionBox(2, 14, 4, 3),\n            new CollisionBox(6, 10, 4, 7),\n            new CollisionBox(10, 8, 6, 9)\n        ],\n        numFrames: 2,\n        frameRate: 1000 / 6,\n        speedOffset: .8\n    }\n];\n\n\n//******************************************************************************\n/**\n * T-rex game character.\n * @param {HTMLCanvas} canvas\n * @param {Object} spritePos Positioning within image sprite.\n * @constructor\n */\nfunction Trex(canvas, spritePos) {\n    this.canvas = canvas;\n    this.canvasCtx = canvas.getContext('2d');\n    this.spritePos = spritePos;\n    this.xPos = 0;\n    this.yPos = 0;\n\tthis.xInitialPos = 0;\n    // Position when on the ground.\n    this.groundYPos = 0;\n    this.currentFrame = 0;\n    this.currentAnimFrames = [];\n    this.blinkDelay = 0;\n    this.blinkCount = 0;\n    this.animStartTime = 0;\n    this.timer = 0;\n    this.msPerFrame = 1000 / FPS;\n    this.config = Trex.config;\n    // Current status.\n    this.status = Trex.status.WAITING;\n\n    this.jumping = false;\n    this.ducking = false;\n    this.jumpVelocity = 0;\n    this.reachedMinHeight = false;\n    this.speedDrop = false;\n    this.jumpCount = 0;\n    this.jumpspotX = 0;\n\n    this.init();\n}\n\n\n/**\n * T-rex player config.\n * @enum {number}\n */\nTrex.config = {\n    DROP_VELOCITY: -5,\n    GRAVITY: 0.6,\n    HEIGHT: 47,\n    HEIGHT_DUCK: 25,\n    INITIAL_JUMP_VELOCITY: -10,\n    INTRO_DURATION: 1500,\n    MAX_JUMP_HEIGHT: 30,\n    MIN_JUMP_HEIGHT: 30,\n    SPEED_DROP_COEFFICIENT: 3,\n    SPRITE_WIDTH: 262,\n    START_X_POS: 50,\n    WIDTH: 44,\n    WIDTH_DUCK: 59\n};\n\n\n/**\n * Used in collision detection.\n * @type {Array<CollisionBox>}\n */\nTrex.collisionBoxes = {\n    DUCKING: [\n        new CollisionBox(1, 18, 55, 25)\n    ],\n    RUNNING: [\n        new CollisionBox(22, 0, 17, 16),\n        new CollisionBox(1, 18, 30, 9),\n        new CollisionBox(10, 35, 14, 8),\n        new CollisionBox(1, 24, 29, 5),\n        new CollisionBox(5, 30, 21, 4),\n        new CollisionBox(9, 34, 15, 4)\n    ]\n};\n\n\n/**\n * Animation states.\n * @enum {string}\n */\nTrex.status = {\n    CRASHED: 'CRASHED',\n    DUCKING: 'DUCKING',\n    JUMPING: 'JUMPING',\n    RUNNING: 'RUNNING',\n    WAITING: 'WAITING'\n};\n\n/**\n * Blinking coefficient.\n * @const\n */\nTrex.BLINK_TIMING = 7000;\n\n\n/**\n * Animation config for different states.\n * @enum {Object}\n */\nTrex.animFrames = {\n    WAITING: {\n        frames: [44, 0],\n        msPerFrame: 1000 / 3\n    },\n    RUNNING: {\n        frames: [88, 132],\n        msPerFrame: 1000 / 12\n    },\n    CRASHED: {\n        frames: [220],\n        msPerFrame: 1000 / 60\n    },\n    JUMPING: {\n        frames: [0],\n        msPerFrame: 1000 / 60\n    },\n    DUCKING: {\n        frames: [264, 323],\n        msPerFrame: 1000 / 8\n    }\n};\n\n\nTrex.prototype = {\n    /**\n     * T-rex player initaliser.\n     * Sets the t-rex to blink at random intervals.\n     */\n    init: function() {\n        this.groundYPos = Runner.defaultDimensions.HEIGHT - this.config.HEIGHT -\n            Runner.config.BOTTOM_PAD;\n        this.yPos = this.groundYPos;\n        this.minJumpHeight = this.groundYPos - this.config.MIN_JUMP_HEIGHT;\n\n        this.draw(0, 0);\n        this.update(0, Trex.status.WAITING);\n    },\n\n    /**\n     * Setter for the jump velocity.\n     * The approriate drop velocity is also set.\n     */\n    setJumpVelocity: function(setting) {\n        this.config.INITIAL_JUMP_VELOCITY = -setting;\n        this.config.DROP_VELOCITY = -setting / 2;\n    },\n\n    /**\n     * Set the animation status.\n     * @param {!number} deltaTime\n     * @param {Trex.status} status Optional status to switch to.\n     */\n    update: function(deltaTime, opt_status) {\n        this.timer += deltaTime;\n\n        // Update the status.\n        if(opt_status) {\n            this.status = opt_status;\n            this.currentFrame = 0;\n            this.msPerFrame = Trex.animFrames[opt_status].msPerFrame;\n            this.currentAnimFrames = Trex.animFrames[opt_status].frames;\n\n            if(opt_status == Trex.status.WAITING) {\n                this.animStartTime = getTimeStamp();\n                this.setBlinkDelay();\n            }\n        }\n\n        // Game intro animation, T-rex moves in from the left.\n        if(this.playingIntro && this.xPos < this.config.START_X_POS) {\n            this.xPos += Math.round((this.config.START_X_POS /\n                this.config.INTRO_DURATION) * deltaTime);\n\t\t\tthis.xInitialPos = this.xPos;\n        }\n\n        if(this.status == Trex.status.WAITING) {\n            this.blink(getTimeStamp());\n        } else {\n            this.draw(this.currentAnimFrames[this.currentFrame], 0);\n        }\n\n        // Update the frame position.\n        if(this.timer >= this.msPerFrame) {\n            this.currentFrame = this.currentFrame ==\n                this.currentAnimFrames.length - 1 ? 0 : this.currentFrame + 1;\n            this.timer = 0;\n        }\n\n        // Speed drop becomes duck if the down key is still being pressed.\n        if(this.speedDrop && this.yPos == this.groundYPos) {\n            this.speedDrop = false;\n            this.setDuck(true);\n        }\n    },\n\n    /**\n     * Draw the t-rex to a particular position.\n     * @param {number} x\n     * @param {number} y\n     */\n    draw: function(x, y) {\n        var sourceX = x;\n        var sourceY = y;\n        var sourceWidth = this.ducking && this.status != Trex.status.CRASHED ?\n            this.config.WIDTH_DUCK : this.config.WIDTH;\n        var sourceHeight = this.config.HEIGHT;\n\n        if(IS_HIDPI) {\n            sourceX *= 2;\n            sourceY *= 2;\n            sourceWidth *= 2;\n            sourceHeight *= 2;\n        }\n\n        // Adjustments for sprite sheet position.\n        sourceX += this.spritePos.x;\n        sourceY += this.spritePos.y;\n\n        // Ducking.\n        if(this.ducking && this.status != Trex.status.CRASHED) {\n            this.canvasCtx.drawImage(Runner.imageSprite, sourceX, sourceY,\n                sourceWidth, sourceHeight,\n                this.xPos, this.yPos,\n                this.config.WIDTH_DUCK, this.config.HEIGHT);\n        } else {\n            // Crashed whilst ducking. Trex is standing up so needs adjustment.\n            if(this.ducking && this.status == Trex.status.CRASHED) {\n                this.xPos++;\n            }\n            // Standing / running\n            this.canvasCtx.drawImage(Runner.imageSprite, sourceX, sourceY,\n                sourceWidth, sourceHeight,\n                this.xPos, this.yPos,\n                this.config.WIDTH, this.config.HEIGHT);\n        }\n    },\n\n    /**\n     * Sets a random time for the blink to happen.\n     */\n    setBlinkDelay: function() {\n        this.blinkDelay = Math.ceil(Math.random() * Trex.BLINK_TIMING);\n    },\n\n    /**\n     * Make t-rex blink at random intervals.\n     * @param {number} time Current time in milliseconds.\n     */\n    blink: function(time) {\n        var deltaTime = time - this.animStartTime;\n\n        if(deltaTime >= this.blinkDelay) {\n            this.draw(this.currentAnimFrames[this.currentFrame], 0);\n\n            if(this.currentFrame == 1) {\n                // Set new random delay to blink.\n                this.setBlinkDelay();\n                this.animStartTime = time;\n                this.blinkCount++;\n            }\n        }\n    },\n\n    /**\n     * Initialise a jump.\n     * @param {number} speed\n     */\n    startJump: function(speed) {\n        if(!this.jumping) {\n            this.update(0, Trex.status.JUMPING);\n            // Tweak the jump velocity based on the speed.\n            this.jumpVelocity = this.config.INITIAL_JUMP_VELOCITY - (speed / 10);\n            this.jumping = true;\n            this.reachedMinHeight = false;\n            this.speedDrop = false;\n        }\n    },\n\n    /**\n     * Jump is complete, falling down.\n     */\n    endJump: function() {\n        if(this.reachedMinHeight &&\n            this.jumpVelocity < this.config.DROP_VELOCITY) {\n            this.jumpVelocity = this.config.DROP_VELOCITY;\n        }\n    },\n\n    /**\n     * Update frame for a jump.\n     * @param {number} deltaTime\n     * @param {number} speed\n     */\n    updateJump: function(deltaTime, speed) {\n        var msPerFrame = Trex.animFrames[this.status].msPerFrame;\n        var framesElapsed = deltaTime / msPerFrame;\n\n        // Speed drop makes Trex fall faster.\n        if(this.speedDrop) {\n            this.yPos += Math.round(this.jumpVelocity *\n                this.config.SPEED_DROP_COEFFICIENT * framesElapsed);\n        } else {\n            this.yPos += Math.round(this.jumpVelocity * framesElapsed);\n        }\n\n        this.jumpVelocity += this.config.GRAVITY * framesElapsed;\n\n        // Minimum height has been reached.\n        if(this.yPos < this.minJumpHeight || this.speedDrop) {\n            this.reachedMinHeight = true;\n        }\n\n        // Reached max height\n        if(this.yPos < this.config.MAX_JUMP_HEIGHT || this.speedDrop) {\n            this.endJump();\n        }\n\n        // Back down at ground level. Jump completed.\n        if(this.yPos > this.groundYPos) {\n            this.reset();\n            this.jumpCount++;\n        }\n\n        this.update(deltaTime);\n    },\n\n    /**\n     * Set the speed drop. Immediately cancels the current jump.\n     */\n    setSpeedDrop: function() {\n        this.speedDrop = true;\n        this.jumpVelocity = 1;\n    },\n\n    /**\n     * @param {boolean} isDucking.\n     */\n    setDuck: function(isDucking) {\n        if(isDucking && this.status != Trex.status.DUCKING) {\n            this.update(0, Trex.status.DUCKING);\n            this.ducking = true;\n        } else if(this.status == Trex.status.DUCKING) {\n            this.update(0, Trex.status.RUNNING);\n            this.ducking = false;\n        }\n    },\n\n    /**\n     * Reset the t-rex to running at start of game.\n     */\n    reset: function() {\n\t\tthis.xPos = this.xInitialPos;\n        this.yPos = this.groundYPos;\n        this.jumpVelocity = 0;\n        this.jumping = false;\n        this.ducking = false;\n        this.update(0, Trex.status.RUNNING);\n        this.midair = false;\n        this.speedDrop = false;\n        this.jumpCount = 0;\n    }\n};\n\n\n//******************************************************************************\n\n/**\n * Handles displaying the distance meter.\n * @param {!HTMLCanvasElement} canvas\n * @param {Object} spritePos Image position in sprite.\n * @param {number} canvasWidth\n * @constructor\n */\nfunction DistanceMeter(canvas, spritePos, canvasWidth) {\n    this.canvas = canvas;\n    this.canvasCtx = canvas.getContext('2d');\n    this.image = Runner.imageSprite;\n    this.spritePos = spritePos;\n    this.x = 0;\n    this.y = 5;\n\n    this.currentDistance = 0;\n    this.maxScore = 0;\n    this.highScore = 0;\n    this.container = null;\n\n    this.digits = [];\n    this.achievement = false;\n    this.defaultString = '';\n    this.flashTimer = 0;\n    this.flashIterations = 0;\n    this.invertTrigger = false;\n\n    this.config = DistanceMeter.config;\n    this.maxScoreUnits = this.config.MAX_DISTANCE_UNITS;\n    this.init(canvasWidth);\n}\n\n\n/**\n * @enum {number}\n */\nDistanceMeter.dimensions = {\n    WIDTH: 10,\n    HEIGHT: 13,\n    DEST_WIDTH: 11\n};\n\n\n/**\n * Y positioning of the digits in the sprite sheet.\n * X position is always 0.\n * @type {Array<number>}\n */\nDistanceMeter.yPos = [0, 13, 27, 40, 53, 67, 80, 93, 107, 120];\n\n\n/**\n * Distance meter config.\n * @enum {number}\n */\nDistanceMeter.config = {\n    // Number of digits.\n    MAX_DISTANCE_UNITS: 5,\n\n    // Distance that causes achievement animation.\n    ACHIEVEMENT_DISTANCE: 100,\n\n    // Used for conversion from pixel distance to a scaled unit.\n    COEFFICIENT: 0.025,\n\n    // Flash duration in milliseconds.\n    FLASH_DURATION: 1000 / 4,\n\n    // Flash iterations for achievement animation.\n    FLASH_ITERATIONS: 3\n};\n\n\nDistanceMeter.prototype = {\n    /**\n     * Initialise the distance meter to '00000'.\n     * @param {number} width Canvas width in px.\n     */\n    init: function(width) {\n        var maxDistanceStr = '';\n\n        this.calcXPos(width);\n        this.maxScore = this.maxScoreUnits;\n        for(var i = 0; i < this.maxScoreUnits; i++) {\n            this.draw(i, 0);\n            this.defaultString += '0';\n            maxDistanceStr += '9';\n        }\n\n        this.maxScore = parseInt(maxDistanceStr);\n    },\n\n    /**\n     * Calculate the xPos in the canvas.\n     * @param {number} canvasWidth\n     */\n    calcXPos: function(canvasWidth) {\n        this.x = canvasWidth - (DistanceMeter.dimensions.DEST_WIDTH *\n            (this.maxScoreUnits + 1));\n    },\n\n    /**\n     * Draw a digit to canvas.\n     * @param {number} digitPos Position of the digit.\n     * @param {number} value Digit value 0-9.\n     * @param {boolean} opt_highScore Whether drawing the high score.\n     */\n    draw: function(digitPos, value, opt_highScore) {\n        var sourceWidth = DistanceMeter.dimensions.WIDTH;\n        var sourceHeight = DistanceMeter.dimensions.HEIGHT;\n        var sourceX = DistanceMeter.dimensions.WIDTH * value;\n        var sourceY = 0;\n\n        var targetX = digitPos * DistanceMeter.dimensions.DEST_WIDTH;\n        var targetY = this.y;\n        var targetWidth = DistanceMeter.dimensions.WIDTH;\n        var targetHeight = DistanceMeter.dimensions.HEIGHT;\n\n        // For high DPI we 2x source values.\n        if(IS_HIDPI) {\n            sourceWidth *= 2;\n            sourceHeight *= 2;\n            sourceX *= 2;\n        }\n\n        sourceX += this.spritePos.x;\n        sourceY += this.spritePos.y;\n\n        this.canvasCtx.save();\n\n        if(opt_highScore) {\n            // Left of the current score.\n            var highScoreX = this.x - (this.maxScoreUnits * 2) *\n                DistanceMeter.dimensions.WIDTH;\n            this.canvasCtx.translate(highScoreX, this.y);\n        } else {\n            this.canvasCtx.translate(this.x, this.y);\n        }\n\n        this.canvasCtx.drawImage(this.image, sourceX, sourceY,\n            sourceWidth, sourceHeight,\n            targetX, targetY,\n            targetWidth, targetHeight\n        );\n\n        this.canvasCtx.restore();\n    },\n\n    /**\n     * Covert pixel distance to a 'real' distance.\n     * @param {number} distance Pixel distance ran.\n     * @return {number} The 'real' distance ran.\n     */\n    getActualDistance: function(distance) {\n        return distance ? Math.round(distance * this.config.COEFFICIENT) : 0;\n    },\n\n    /**\n     * Update the distance meter.\n     * @param {number} distance\n     * @param {number} deltaTime\n     * @return {boolean} Whether the achievement sound fx should be played.\n     */\n    update: function(deltaTime, distance) {\n        var paint = true;\n        var playSound = false;\n\n        if(!this.achievement) {\n            distance = this.getActualDistance(distance);\n            // Score has gone beyond the initial digit count.\n            if(distance > this.maxScore && this.maxScoreUnits ==\n                this.config.MAX_DISTANCE_UNITS) {\n                this.maxScoreUnits++;\n                this.maxScore = parseInt(this.maxScore + '9');\n            } else {\n                this.distance = 0;\n            }\n\n            if(distance > 0) {\n                // achievement unlocked\n                if(distance % this.config.ACHIEVEMENT_DISTANCE == 0) {\n                    // Flash score and play sound.\n                    this.achievement = true;\n                    this.flashTimer = 0;\n                    playSound = true;\n                }\n\n                // Create a string representation of the distance with leading 0.\n                var distanceStr = (this.defaultString +\n                    distance).substr(-this.maxScoreUnits);\n                this.digits = distanceStr.split('');\n            } else {\n                this.digits = this.defaultString.split('');\n            }\n        } else {\n            // Control flashing of the score on reaching achievement.\n            if(this.flashIterations <= this.config.FLASH_ITERATIONS) {\n                this.flashTimer += deltaTime;\n\n                if(this.flashTimer < this.config.FLASH_DURATION) {\n                    paint = false;\n                } else if(this.flashTimer >\n                    this.config.FLASH_DURATION * 2) {\n                    this.flashTimer = 0;\n                    this.flashIterations++;\n                }\n            } else {\n                this.achievement = false;\n                this.flashIterations = 0;\n                this.flashTimer = 0;\n            }\n        }\n\n        // Draw the digits if not flashing.\n        if(paint) {\n            for(var i = this.digits.length - 1; i >= 0; i--) {\n                this.draw(i, parseInt(this.digits[i]));\n            }\n        }\n\n        this.drawHighScore();\n        return playSound;\n    },\n\n    /**\n     * Draw the high score.\n     */\n    drawHighScore: function() {\n        this.canvasCtx.save();\n        this.canvasCtx.globalAlpha = .8;\n        for(var i = this.highScore.length - 1; i >= 0; i--) {\n            this.draw(i, parseInt(this.highScore[i], 10), true);\n        }\n        this.canvasCtx.restore();\n    },\n\n    /**\n     * Set the highscore as a array string.\n     * Position of char in the sprite: H - 10, I - 11.\n     * @param {number} distance Distance ran in pixels.\n     */\n    setHighScore: function(distance) {\n        distance = this.getActualDistance(distance);\n        var highScoreStr = (this.defaultString +\n            distance).substr(-this.maxScoreUnits);\n\n        this.highScore = ['10', '11', ''].concat(highScoreStr.split(''));\n    },\n\n    /**\n     * Reset the distance meter back to '00000'.\n     */\n    reset: function() {\n        this.update(0);\n        this.achievement = false;\n    }\n};\n\n\n//******************************************************************************\n\n/**\n * Cloud background item.\n * Similar to an obstacle object but without collision boxes.\n * @param {HTMLCanvasElement} canvas Canvas element.\n * @param {Object} spritePos Position of image in sprite.\n * @param {number} containerWidth\n */\nfunction Cloud(canvas, spritePos, containerWidth) {\n    this.canvas = canvas;\n    this.canvasCtx = this.canvas.getContext('2d');\n    this.spritePos = spritePos;\n    this.containerWidth = containerWidth;\n    this.xPos = containerWidth;\n    this.yPos = 0;\n    this.remove = false;\n    this.cloudGap = getRandomNum(Cloud.config.MIN_CLOUD_GAP,\n        Cloud.config.MAX_CLOUD_GAP);\n\n    this.init();\n}\n\n\n/**\n * Cloud object config.\n * @enum {number}\n */\nCloud.config = {\n    HEIGHT: 14,\n    MAX_CLOUD_GAP: 400,\n    MAX_SKY_LEVEL: 30,\n    MIN_CLOUD_GAP: 100,\n    MIN_SKY_LEVEL: 71,\n    WIDTH: 46\n};\n\n\nCloud.prototype = {\n    /**\n     * Initialise the cloud. Sets the Cloud height.\n     */\n    init: function() {\n        this.yPos = getRandomNum(Cloud.config.MAX_SKY_LEVEL,\n            Cloud.config.MIN_SKY_LEVEL);\n        this.draw();\n    },\n\n    /**\n     * Draw the cloud.\n     */\n    draw: function() {\n        this.canvasCtx.save();\n        var sourceWidth = Cloud.config.WIDTH;\n        var sourceHeight = Cloud.config.HEIGHT;\n\n        if(IS_HIDPI) {\n            sourceWidth = sourceWidth * 2;\n            sourceHeight = sourceHeight * 2;\n        }\n\n        this.canvasCtx.drawImage(Runner.imageSprite, this.spritePos.x,\n            this.spritePos.y,\n            sourceWidth, sourceHeight,\n            this.xPos, this.yPos,\n            Cloud.config.WIDTH, Cloud.config.HEIGHT);\n\n        this.canvasCtx.restore();\n    },\n\n    /**\n     * Update the cloud position.\n     * @param {number} speed\n     */\n    update: function(speed) {\n        if(!this.remove) {\n            this.xPos -= Math.ceil(speed);\n            this.draw();\n\n            // Mark as removeable if no longer in the canvas.\n            if(!this.isVisible()) {\n                this.remove = true;\n            }\n        }\n    },\n\n    /**\n     * Check if the cloud is visible on the stage.\n     * @return {boolean}\n     */\n    isVisible: function() {\n        return this.xPos + Cloud.config.WIDTH > 0;\n    }\n};\n\n\n//******************************************************************************\n\n/**\n * Nightmode shows a moon and stars on the horizon.\n */\nfunction NightMode(canvas, spritePos, containerWidth) {\n    this.spritePos = spritePos;\n    this.canvas = canvas;\n    this.canvasCtx = canvas.getContext('2d');\n    this.xPos = containerWidth - 50;\n    this.yPos = 30;\n    this.currentPhase = 0;\n    this.opacity = 0;\n    this.containerWidth = containerWidth;\n    this.stars = [];\n    this.drawStars = false;\n    this.placeStars();\n}\n\n/**\n * @enum {number}\n */\nNightMode.config = {\n    FADE_SPEED: 0.035,\n    HEIGHT: 40,\n    MOON_SPEED: 0.25,\n    NUM_STARS: 2,\n    STAR_SIZE: 9,\n    STAR_SPEED: 0.3,\n    STAR_MAX_Y: 70,\n    WIDTH: 20\n};\n\nNightMode.phases = [140, 120, 100, 60, 40, 20, 0];\n\nNightMode.prototype = {\n    /**\n     * Update moving moon, changing phases.\n     * @param {boolean} activated Whether night mode is activated.\n     * @param {number} delta\n     */\n    update: function(activated, delta) {\n        // Moon phase.\n        if(activated && this.opacity == 0) {\n            this.currentPhase++;\n\n            if(this.currentPhase >= NightMode.phases.length) {\n                this.currentPhase = 0;\n            }\n        }\n\n        // Fade in / out.\n        if(activated && (this.opacity < 1 || this.opacity == 0)) {\n            this.opacity += NightMode.config.FADE_SPEED;\n        } else if(this.opacity > 0) {\n            this.opacity -= NightMode.config.FADE_SPEED;\n        }\n\n        // Set moon positioning.\n        if(this.opacity > 0) {\n            this.xPos = this.updateXPos(this.xPos, NightMode.config.MOON_SPEED);\n\n            // Update stars.\n            if(this.drawStars) {\n                for(var i = 0; i < NightMode.config.NUM_STARS; i++) {\n                    this.stars[i].x = this.updateXPos(this.stars[i].x,\n                        NightMode.config.STAR_SPEED);\n                }\n            }\n            this.draw();\n        } else {\n            this.opacity = 0;\n            this.placeStars();\n        }\n        this.drawStars = true;\n    },\n\n    updateXPos: function(currentPos, speed) {\n        if(currentPos < -NightMode.config.WIDTH) {\n            currentPos = this.containerWidth;\n        } else {\n            currentPos -= speed;\n        }\n        return currentPos;\n    },\n\n    draw: function() {\n        var moonSourceWidth = this.currentPhase == 3 ? NightMode.config.WIDTH * 2 :\n            NightMode.config.WIDTH;\n        var moonSourceHeight = NightMode.config.HEIGHT;\n        var moonSourceX = this.spritePos.x + NightMode.phases[this.currentPhase];\n        var moonOutputWidth = moonSourceWidth;\n        var starSize = NightMode.config.STAR_SIZE;\n        var starSourceX = Runner.spriteDefinition.LDPI.STAR.x;\n\n        if(IS_HIDPI) {\n            moonSourceWidth *= 2;\n            moonSourceHeight *= 2;\n            moonSourceX = this.spritePos.x +\n                (NightMode.phases[this.currentPhase] * 2);\n            starSize *= 2;\n            starSourceX = Runner.spriteDefinition.HDPI.STAR.x;\n        }\n\n        this.canvasCtx.save();\n        this.canvasCtx.globalAlpha = this.opacity;\n\n        // Stars.\n        if(this.drawStars) {\n            for(var i = 0; i < NightMode.config.NUM_STARS; i++) {\n                this.canvasCtx.drawImage(Runner.imageSprite,\n                    starSourceX, this.stars[i].sourceY, starSize, starSize,\n                    Math.round(this.stars[i].x), this.stars[i].y,\n                    NightMode.config.STAR_SIZE, NightMode.config.STAR_SIZE);\n            }\n        }\n\n        // Moon.\n        this.canvasCtx.drawImage(Runner.imageSprite, moonSourceX,\n            this.spritePos.y, moonSourceWidth, moonSourceHeight,\n            Math.round(this.xPos), this.yPos,\n            moonOutputWidth, NightMode.config.HEIGHT);\n\n        this.canvasCtx.globalAlpha = 1;\n        this.canvasCtx.restore();\n    },\n\n    // Do star placement.\n    placeStars: function() {\n        var segmentSize = Math.round(this.containerWidth /\n            NightMode.config.NUM_STARS);\n\n        for(var i = 0; i < NightMode.config.NUM_STARS; i++) {\n            this.stars[i] = {};\n            this.stars[i].x = getRandomNum(segmentSize * i, segmentSize * (i + 1));\n            this.stars[i].y = getRandomNum(0, NightMode.config.STAR_MAX_Y);\n\n            if(IS_HIDPI) {\n                this.stars[i].sourceY = Runner.spriteDefinition.HDPI.STAR.y +\n                    NightMode.config.STAR_SIZE * 2 * i;\n            } else {\n                this.stars[i].sourceY = Runner.spriteDefinition.LDPI.STAR.y +\n                    NightMode.config.STAR_SIZE * i;\n            }\n        }\n    },\n\n    reset: function() {\n        this.currentPhase = 0;\n        this.opacity = 0;\n        this.update(false);\n    }\n\n};\n\n\n//******************************************************************************\n\n/**\n * Horizon Line.\n * Consists of two connecting lines. Randomly assigns a flat / bumpy horizon.\n * @param {HTMLCanvasElement} canvas\n * @param {Object} spritePos Horizon position in sprite.\n * @constructor\n */\nfunction HorizonLine(canvas, spritePos) {\n    this.spritePos = spritePos;\n    this.canvas = canvas;\n    this.canvasCtx = canvas.getContext('2d');\n    this.sourceDimensions = {};\n    this.dimensions = HorizonLine.dimensions;\n    this.sourceXPos = [this.spritePos.x, this.spritePos.x +\n        this.dimensions.WIDTH\n    ];\n    this.xPos = [];\n    this.yPos = 0;\n    this.bumpThreshold = 0.5;\n\n    this.setSourceDimensions();\n    this.draw();\n}\n\n\n/**\n * Horizon line dimensions.\n * @enum {number}\n */\nHorizonLine.dimensions = {\n    WIDTH: 600,\n    HEIGHT: 12,\n    YPOS: 127\n};\n\n\nHorizonLine.prototype = {\n    /**\n     * Set the source dimensions of the horizon line.\n     */\n    setSourceDimensions: function() {\n\n        for(var dimension in HorizonLine.dimensions) {\n            if(IS_HIDPI) {\n                if(dimension != 'YPOS') {\n                    this.sourceDimensions[dimension] =\n                        HorizonLine.dimensions[dimension] * 2;\n                }\n            } else {\n                this.sourceDimensions[dimension] =\n                    HorizonLine.dimensions[dimension];\n            }\n            this.dimensions[dimension] = HorizonLine.dimensions[dimension];\n        }\n\n        this.xPos = [0, HorizonLine.dimensions.WIDTH];\n        this.yPos = HorizonLine.dimensions.YPOS;\n    },\n\n    /**\n     * Return the crop x position of a type.\n     */\n    getRandomType: function() {\n        return Math.random() > this.bumpThreshold ? this.dimensions.WIDTH : 0;\n    },\n\n    /**\n     * Draw the horizon line.\n     */\n    draw: function() {\n        this.canvasCtx.drawImage(Runner.imageSprite, this.sourceXPos[0],\n            this.spritePos.y,\n            this.sourceDimensions.WIDTH, this.sourceDimensions.HEIGHT,\n            this.xPos[0], this.yPos,\n            this.dimensions.WIDTH, this.dimensions.HEIGHT);\n\n        this.canvasCtx.drawImage(Runner.imageSprite, this.sourceXPos[1],\n            this.spritePos.y,\n            this.sourceDimensions.WIDTH, this.sourceDimensions.HEIGHT,\n            this.xPos[1], this.yPos,\n            this.dimensions.WIDTH, this.dimensions.HEIGHT);\n    },\n\n    /**\n     * Update the x position of an indivdual piece of the line.\n     * @param {number} pos Line position.\n     * @param {number} increment\n     */\n    updateXPos: function(pos, increment) {\n        var line1 = pos;\n        var line2 = pos == 0 ? 1 : 0;\n\n        this.xPos[line1] -= increment;\n        this.xPos[line2] = this.xPos[line1] + this.dimensions.WIDTH;\n\n        if(this.xPos[line1] <= -this.dimensions.WIDTH) {\n            this.xPos[line1] += this.dimensions.WIDTH * 2;\n            this.xPos[line2] = this.xPos[line1] - this.dimensions.WIDTH;\n            this.sourceXPos[line1] = this.getRandomType() + this.spritePos.x;\n        }\n    },\n\n    /**\n     * Update the horizon line.\n     * @param {number} deltaTime\n     * @param {number} speed\n     */\n    update: function(deltaTime, speed) {\n        var increment = Math.floor(speed * (FPS / 1000) * deltaTime);\n\n        if(this.xPos[0] <= 0) {\n            this.updateXPos(0, increment);\n        } else {\n            this.updateXPos(1, increment);\n        }\n        this.draw();\n    },\n\n    /**\n     * Reset horizon to the starting position.\n     */\n    reset: function() {\n        this.xPos[0] = 0;\n        this.xPos[1] = HorizonLine.dimensions.WIDTH;\n    }\n};\n\n\n//******************************************************************************\n\n/**\n * Horizon background class.\n * @param {HTMLCanvasElement} canvas\n * @param {Object} spritePos Sprite positioning.\n * @param {Object} dimensions Canvas dimensions.\n * @param {number} gapCoefficient\n * @constructor\n */\nfunction Horizon(canvas, spritePos, dimensions, gapCoefficient) {\n    this.canvas = canvas;\n    this.canvasCtx = this.canvas.getContext('2d');\n    this.config = Horizon.config;\n    this.dimensions = dimensions;\n    this.gapCoefficient = gapCoefficient;\n    this.obstacles = [];\n    this.obstacleHistory = [];\n    this.horizonOffsets = [0, 0];\n    this.cloudFrequency = this.config.CLOUD_FREQUENCY;\n    this.spritePos = spritePos;\n    this.nightMode = null;\n\n    // Cloud\n    this.clouds = [];\n    this.cloudSpeed = this.config.BG_CLOUD_SPEED;\n\n    // Horizon\n    this.horizonLine = null;\n    this.init();\n}\n\n\n/**\n * Horizon config.\n * @enum {number}\n */\nHorizon.config = {\n    BG_CLOUD_SPEED: 0.2,\n    BUMPY_THRESHOLD: .3,\n    CLOUD_FREQUENCY: .5,\n    HORIZON_HEIGHT: 16,\n    MAX_CLOUDS: 6\n};\n\n\nHorizon.prototype = {\n    /**\n     * Initialise the horizon. Just add the line and a cloud. No obstacles.\n     */\n    init: function() {\n        this.addCloud();\n        this.horizonLine = new HorizonLine(this.canvas, this.spritePos.HORIZON);\n        this.nightMode = new NightMode(this.canvas, this.spritePos.MOON,\n            this.dimensions.WIDTH);\n    },\n\n    /**\n     * @param {number} deltaTime\n     * @param {number} currentSpeed\n     * @param {boolean} updateObstacles Used as an override to prevent\n     *     the obstacles from being updated / added. This happens in the\n     *     ease in section.\n     * @param {boolean} showNightMode Night mode activated.\n     */\n    update: function(deltaTime, currentSpeed, updateObstacles, showNightMode) {\n        this.runningTime += deltaTime;\n        this.horizonLine.update(deltaTime, currentSpeed);\n        this.nightMode.update(showNightMode);\n        this.updateClouds(deltaTime, currentSpeed);\n\n        if(updateObstacles) {\n            this.updateObstacles(deltaTime, currentSpeed);\n        }\n    },\n\n    /**\n     * Update the cloud positions.\n     * @param {number} deltaTime\n     * @param {number} currentSpeed\n     */\n    updateClouds: function(deltaTime, speed) {\n        var cloudSpeed = this.cloudSpeed / 1000 * deltaTime * speed;\n        var numClouds = this.clouds.length;\n\n        if(numClouds) {\n            for(var i = numClouds - 1; i >= 0; i--) {\n                this.clouds[i].update(cloudSpeed);\n            }\n\n            var lastCloud = this.clouds[numClouds - 1];\n\n            // Check for adding a new cloud.\n            if(numClouds < this.config.MAX_CLOUDS &&\n                (this.dimensions.WIDTH - lastCloud.xPos) > lastCloud.cloudGap &&\n                this.cloudFrequency > Math.random()) {\n                this.addCloud();\n            }\n\n            // Remove expired clouds.\n            this.clouds = this.clouds.filter(function(obj) {\n                return !obj.remove;\n            });\n        } else {\n            this.addCloud();\n        }\n    },\n\n    /**\n     * Update the obstacle positions.\n     * @param {number} deltaTime\n     * @param {number} currentSpeed\n     */\n    updateObstacles: function(deltaTime, currentSpeed) {\n        // Obstacles, move to Horizon layer.\n        var updatedObstacles = this.obstacles.slice(0);\n\n        for(var i = 0; i < this.obstacles.length; i++) {\n            var obstacle = this.obstacles[i];\n            obstacle.update(deltaTime, currentSpeed);\n\n            // Clean up existing obstacles.\n            if(obstacle.remove) {\n                updatedObstacles.shift();\n            }\n        }\n        this.obstacles = updatedObstacles;\n\n        if(this.obstacles.length > 0) {\n            var lastObstacle = this.obstacles[this.obstacles.length - 1];\n\n            if(lastObstacle && !lastObstacle.followingObstacleCreated &&\n                lastObstacle.isVisible() &&\n                (lastObstacle.xPos + lastObstacle.width + lastObstacle.gap) <\n                this.dimensions.WIDTH) {\n                this.addNewObstacle(currentSpeed);\n                lastObstacle.followingObstacleCreated = true;\n            }\n        } else {\n            // Create new obstacles.\n            this.addNewObstacle(currentSpeed);\n        }\n    },\n\n    removeFirstObstacle: function() {\n        this.obstacles.shift();\n    },\n\n    /**\n     * Add a new obstacle.\n     * @param {number} currentSpeed\n     */\n    addNewObstacle: function(currentSpeed) {\n        var obstacleTypeIndex = getRandomNum(0, Obstacle.types.length - 1);\n        var obstacleType = Obstacle.types[obstacleTypeIndex];\n\n        // Check for multiples of the same type of obstacle.\n        // Also check obstacle is available at current speed.\n        if(this.duplicateObstacleCheck(obstacleType.type) ||\n            currentSpeed < obstacleType.minSpeed) {\n            this.addNewObstacle(currentSpeed);\n        } else {\n            var obstacleSpritePos = this.spritePos[obstacleType.type];\n\n            this.obstacles.push(new Obstacle(this.canvasCtx, obstacleType,\n                obstacleSpritePos, this.dimensions,\n                this.gapCoefficient, currentSpeed, obstacleType.width));\n\n            this.obstacleHistory.unshift(obstacleType.type);\n\n            if(this.obstacleHistory.length > 1) {\n                this.obstacleHistory.splice(Runner.config.MAX_OBSTACLE_DUPLICATION);\n            }\n        }\n    },\n\n    /**\n     * Returns whether the previous two obstacles are the same as the next one.\n     * Maximum duplication is set in config value MAX_OBSTACLE_DUPLICATION.\n     * @return {boolean}\n     */\n    duplicateObstacleCheck: function(nextObstacleType) {\n        var duplicateCount = 0;\n\n        for(var i = 0; i < this.obstacleHistory.length; i++) {\n            duplicateCount = this.obstacleHistory[i] == nextObstacleType ?\n                duplicateCount + 1 : 0;\n        }\n        return duplicateCount >= Runner.config.MAX_OBSTACLE_DUPLICATION;\n    },\n\n    /**\n     * Reset the horizon layer.\n     * Remove existing obstacles and reposition the horizon line.\n     */\n    reset: function() {\n        this.obstacles = [];\n        this.horizonLine.reset();\n        this.nightMode.reset();\n    },\n\n    /**\n     * Update the canvas width and scaling.\n     * @param {number} width Canvas width.\n     * @param {number} height Canvas height.\n     */\n    resize: function(width, height) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n    },\n\n    /**\n     * Add a new cloud to the horizon.\n     */\n    addCloud: function() {\n        this.clouds.push(new Cloud(this.canvas, this.spritePos.CLOUD,\n            this.dimensions.WIDTH));\n    }\n};\n\n\nfunction onDocumentLoad() {\n    new Runner('.interstitial-wrapper');\n}\n\ndocument.addEventListener('DOMContentLoaded', onDocumentLoad);"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:23.949Z",
        "time": 53.169000002526445,
        "timings": {
          "blocked": 2.393000000453554,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.001,
          "wait": 32.08999999933946,
          "receive": 18.68500000273343,
          "_blocked_queueing": 2.387000000453554
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://3kh0.github.io/projects/chrome-dino/index.html",
          "lineNumber": 17
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/js/main.js",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "x-fastly-request-id",
              "value": "8e8f3cc8f3098b447e164e7ef4ec63ec0a6386f4"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:12:00 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "content-length",
              "value": "854"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21948-LGA"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:55 GMT"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "x-github-request-id",
              "value": "0805:70F1:6CFEE8:92F3FC:63527015"
            },
            {
              "name": "x-timer",
              "value": "S1666455120.162559,VS0,VE12"
            },
            {
              "name": "etag",
              "value": "W/\"6351ed67-7d2\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 11:39:31 GMT"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "1"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2002,
            "mimeType": "application/javascript",
            "text": "// Hello there!\n//\n// If you want to add my games to your site, please reach out at my email: echo-the-coder@tuta.io, or discord: 3kh0_#1791\n\nconsole.warn(\n  \"%cNote!\",\n  \"color: purple; font-weight: 600; background: yellow; padding: 0 5px; border-radius: 5px\",\n  \"If you want to add my games to your site, please reach out at my email: echo-the-coder@tuta.io\\nPlease do not just add them without asking me first! Thank you!\"\n);\n\nfunction script(text) {\n  console.log(\"%cScript Injection\", \"color: cyan; font-weight: 600; background: black; padding: 0 5px; border-radius: 5px\", text);\n}\n\n// ====================================\n// SCRIPT INJECTION\n// ====================================\n\nvar gaenabled = window.localStorage.getItem(\"ga\");\nif (gaenabled == \"false\") {\n  script(\"Skipped GA injection because it is disabled by the user.\");\n} else {\n  const gascript = document.createElement(\"script\");\n  gascript.setAttribute(\"async\", \"\");\n  gascript.setAttribute(\"src\", \"https://www.googletagmanager.com/gtag/js?id=G-98DP5VKS42\");\n  const inlinegascript = document.createElement(\"script\");\n  inlinegascript.innerHTML = `window.dataLayer = window.dataLayer || [];\n      function gtag(){dataLayer.push(arguments);}\n      gtag('js', new Date());\n      gtag('config', 'G-98DP5VKS42');`;\n  document.head.append(gascript, inlinegascript);\n  script(\"Injected script 1/3\");\n}\n\nconst tabCloak = document.createElement(\"script\");\ntabCloak.setAttribute(\"src\", \"/js/tab_cloak.js\");\ndocument.head.append(tabCloak);\nscript(\"Injected script 2/3\");\n\n//const notify = document.createElement(\"script\");\n//notify.setAttribute(\"src\", \"/js/notify.js\");\n//document.head.append(notify);\nscript(\"Injected script 3/3\");\n\nconst adblock = document.createElement(\"script\");\nadblock.setAttribute(\"src\", \"https://fundingchoicesmessages.google.com/i/pub-5756835229788588?ers=1\");\nadblock.setAttribute(\"nonce\", \"yibq-w_TR5NOCRWsU-VL0Q\");\nadblock.setAttribute(\"async\", \"\");\ndocument.head.append(adblock);\nscript(\"Injected script 4/4\");\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:23.960Z",
        "time": 157.8430000008666,
        "timings": {
          "blocked": 0.7879999995010439,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.001,
          "wait": 147.71899999889987,
          "receive": 9.335000002465677,
          "_blocked_queueing": 0.7829999995010439
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "HandleFetch",
                "scriptId": "3",
                "url": "https://3kh0.github.io/projects/chrome-dino/sw.js",
                "lineNumber": 350,
                "columnNumber": 35
              }
            ],
            "parent": {
              "description": "async function",
              "callFrames": [
                {
                  "functionName": "HandleFetch",
                  "scriptId": "3",
                  "url": "https://3kh0.github.io/projects/chrome-dino/sw.js",
                  "lineNumber": 335,
                  "columnNumber": 35
                },
                {
                  "functionName": "",
                  "scriptId": "3",
                  "url": "https://3kh0.github.io/projects/chrome-dino/sw.js",
                  "lineNumber": 386,
                  "columnNumber": 25
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "fetch",
        "cache": {},
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/js/main.js",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:12:00 GMT"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 11:39:31 GMT"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21948-LGA"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "x-cache-hits",
              "value": "1"
            },
            {
              "name": "x-timer",
              "value": "S1666455120.162559,VS0,VE12"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-fastly-request-id",
              "value": "8e8f3cc8f3098b447e164e7ef4ec63ec0a6386f4"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:55 GMT"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "etag",
              "value": "W/\"6351ed67-7d2\""
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "x-github-request-id",
              "value": "0805:70F1:6CFEE8:92F3FC:63527015"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "854"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "185.199.111.153",
        "startedDateTime": "2022-10-22T16:13:23.984Z",
        "time": 120.03499999991618,
        "timings": {
          "blocked": 96.24800000056834,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.5329999996235131,
          "receive": 23.25399999972433,
          "_blocked_queueing": 76.50400000056834
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://3kh0.github.io/projects/chrome-dino/index.html",
          "lineNumber": 24
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/projects/chrome-dino/images/default_100_percent/100-error-offline.png",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "x-fastly-request-id",
              "value": "143924afc5b738709e6ec8fce4a60ccd2ba4b169"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:13:16 GMT"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "content-length",
              "value": "2645"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21935-LGA"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:56 GMT"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "x-github-request-id",
              "value": "0806:0C34:BA09DD:FC69BA:6354169C"
            },
            {
              "name": "x-timer",
              "value": "S1666455196.046015,VS0,VE10"
            },
            {
              "name": "etag",
              "value": "\"6351ed68-a55\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-origin-cache",
              "value": "HIT"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 16:23:16 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2645,
            "mimeType": "image/png",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:23.987Z",
        "time": 197.16300000072806,
        "timings": {
          "blocked": 179.2289999988447,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.001,
          "wait": 17.202999998496846,
          "receive": 0.7300000033865217,
          "_blocked_queueing": 179.2219999988447
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://3kh0.github.io/projects/chrome-dino/index.html",
          "lineNumber": 25
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/projects/chrome-dino/images/default_200_percent/200-error-offline.png",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "x-fastly-request-id",
              "value": "628350409f51716e14c169293e300354e9fe6471"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:13:16 GMT"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "content-length",
              "value": "3244"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21935-LGA"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:56 GMT"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "x-github-request-id",
              "value": "F7A0:5914:C62C97:1089966:6354169C"
            },
            {
              "name": "x-timer",
              "value": "S1666455196.151642,VS0,VE11"
            },
            {
              "name": "etag",
              "value": "\"6351ed68-cac\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-origin-cache",
              "value": "HIT"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 16:23:16 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 3244,
            "mimeType": "image/png",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:23.987Z",
        "time": 240.08900000262656,
        "timings": {
          "blocked": 201.633000002529,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 33.04400000148336,
          "receive": 5.411999998614192,
          "_blocked_queueing": 201.628000002529
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://3kh0.github.io/projects/chrome-dino/index.html",
          "lineNumber": 38
        },
        "_priority": "Medium",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/projects/chrome-dino/register-sw.js",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "x-fastly-request-id",
              "value": "b80d4b07d3cde95b11e9285a2de010211e994fae"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:13:16 GMT"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "content-length",
              "value": "82"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21935-LGA"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:56 GMT"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "x-github-request-id",
              "value": "080F:05E5:BDA651:1000F49:6354169C"
            },
            {
              "name": "x-timer",
              "value": "S1666455196.034325,VS0,VE10"
            },
            {
              "name": "etag",
              "value": "\"6351ed68-52\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-origin-cache",
              "value": "HIT"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 16:23:16 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 82,
            "mimeType": "application/javascript",
            "text": "if ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('sw.js');\n}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:24.005Z",
        "time": 154.69200000006822,
        "timings": {
          "blocked": 131.40399999839346,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.001,
          "wait": 17.829999998740387,
          "receive": 5.457000002934365,
          "_blocked_queueing": 131.39999999839347
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "57",
                "url": "https://3kh0.github.io/js/main.js",
                "lineNumber": 30,
                "columnNumber": 16
              }
            ]
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://www.googletagmanager.com/gtag/js?id=G-98DP5VKS42",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [
            {
              "name": "id",
              "value": "G-98DP5VKS42"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 307,
          "statusText": "Internal Redirect",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Location",
              "value": "chrome-extension://cjpalhdlnbpafiamejdnhcphjbkeiagm/web_accessible_resources/google-analytics_analytics.js?secret=paokao"
            },
            {
              "name": "Non-Authoritative-Reason",
              "value": "WebRequest API"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "chrome-extension://cjpalhdlnbpafiamejdnhcphjbkeiagm/web_accessible_resources/google-analytics_analytics.js?secret=paokao",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:24.174Z",
        "time": 132.60900000022957,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 132.60900000022957,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "57",
                "url": "https://3kh0.github.io/js/main.js",
                "lineNumber": 36,
                "columnNumber": 14
              }
            ]
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/js/tab_cloak.js",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "x-fastly-request-id",
              "value": "b032bd8d69a71a57b4c365caa82a0d19a1b77425"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:12:04 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "content-length",
              "value": "267"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21948-LGA"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:55 GMT"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "x-github-request-id",
              "value": "0803:39D3:6EBBC6:9D7CB2:63527025"
            },
            {
              "name": "x-timer",
              "value": "S1666455124.395372,VS0,VE33"
            },
            {
              "name": "etag",
              "value": "W/\"6351ed67-23a\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 13:03:00 GMT"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "1"
            }
          ],
          "cookies": [],
          "content": {
            "size": 570,
            "mimeType": "application/javascript",
            "text": "//Declare variables for cloak here\nconst local_title = localStorage.getItem(\"title\");\nconst local_icon = localStorage.getItem(\"icon\");\n\n// Set tab title (if needed)\nif (window.localStorage.hasOwnProperty(\"title\")) {\n  document.title = local_title;\n  console.log(\"Title set to: \" + local_title);\n} else {\n  console.log(\"Title not set :(\");\n}\n// Set tab icon (if needed)\nif (window.localStorage.hasOwnProperty(\"icon\")) {\n  document.querySelector(\"link[rel=icon]\").href = local_icon;\n  console.log(\"Icon set to: \" + local_icon);\n} else {\n  console.log(\"Icon not set :(\");\n}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:24.185Z",
        "time": 82.03099999809638,
        "timings": {
          "blocked": 15.684000000429572,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.001,
          "wait": 66.07700000118814,
          "receive": 0.26899999647866935,
          "_blocked_queueing": 15.680000000429573
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "57",
                "url": "https://3kh0.github.io/js/main.js",
                "lineNumber": 48,
                "columnNumber": 14
              }
            ]
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://fundingchoicesmessages.google.com/i/pub-5756835229788588?ers=1",
          "httpVersion": "",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [
            {
              "name": "ers",
              "value": "1"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_BLOCKED_BY_CLIENT"
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:24.187Z",
        "time": 266.3189999984752,
        "timings": {
          "blocked": 266.3189999984752,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "HandleFetch",
                "scriptId": "3",
                "url": "https://3kh0.github.io/projects/chrome-dino/sw.js",
                "lineNumber": 350,
                "columnNumber": 35
              }
            ],
            "parent": {
              "description": "async function",
              "callFrames": [
                {
                  "functionName": "HandleFetch",
                  "scriptId": "3",
                  "url": "https://3kh0.github.io/projects/chrome-dino/sw.js",
                  "lineNumber": 335,
                  "columnNumber": 35
                },
                {
                  "functionName": "",
                  "scriptId": "3",
                  "url": "https://3kh0.github.io/projects/chrome-dino/sw.js",
                  "lineNumber": 386,
                  "columnNumber": 25
                }
              ],
              "parentId": {
                "id": "2",
                "debuggerId": "-3728582695173187187.2409688123741624383"
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "fetch",
        "cache": {},
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/js/tab_cloak.js",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:12:04 GMT"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 13:03:00 GMT"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21948-LGA"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "x-cache-hits",
              "value": "1"
            },
            {
              "name": "x-timer",
              "value": "S1666455124.395372,VS0,VE33"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-fastly-request-id",
              "value": "b032bd8d69a71a57b4c365caa82a0d19a1b77425"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:55 GMT"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "etag",
              "value": "W/\"6351ed67-23a\""
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "x-github-request-id",
              "value": "0803:39D3:6EBBC6:9D7CB2:63527025"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "267"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "185.199.111.153",
        "startedDateTime": "2022-10-22T16:13:24.231Z",
        "time": 29.056999999738764,
        "timings": {
          "blocked": 17.99499999960605,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.4690000010705546,
          "receive": 10.592999999062158,
          "_blocked_queueing": 9.47699999960605
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "other"
        },
        "_priority": "Medium",
        "_resourceType": "manifest",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/projects/chrome-dino/appmanifest.json",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "x-fastly-request-id",
              "value": "87b00bfd9e94e93caf37f556d108caceca70c23e"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:13:16 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "content-length",
              "value": "275"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21975-LGA"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:56 GMT"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "x-github-request-id",
              "value": "080F:05E5:BDA677:1000F7A:6354169C"
            },
            {
              "name": "x-timer",
              "value": "S1666455197.726711,VS0,VE9"
            },
            {
              "name": "etag",
              "value": "W/\"6351ed68-2aa\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 16:23:16 GMT"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-origin-cache",
              "value": "HIT"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            }
          ],
          "cookies": [],
          "content": {
            "size": 682,
            "mimeType": "application/json",
            "text": "{\n\t\"name\": \"Chrome Dino\",\n\t\"short_name\": \"Chrome Dino\",\n\t\"description\": \"An offline game from Google Chrome\",\n\t\"version\": \"1.5\",\n\t\"start_url\": \"index.html\",\n\t\"display\": \"fullscreen\",\n\t\"orientation\": \"any\",\n\t\"background_color\": \"#ffffff\",\n\t\"icons\": [\n\t\t{\n\t\t\t\"src\": \"icons/icon-16.png\",\n\t\t\t\"sizes\": \"16x16\",\n\t\t\t\"type\": \"image/png\"\n\t\t},\n\t\t{\n\t\t\t\"src\": \"icons/icon-32.png\",\n\t\t\t\"sizes\": \"32x32\",\n\t\t\t\"type\": \"image/png\"\n\t\t},\n\t\t{\n\t\t\t\"src\": \"icons/icon-114.png\",\n\t\t\t\"sizes\": \"114x114\",\n\t\t\t\"type\": \"image/png\"\n\t\t},\n\t\t{\n\t\t\t\"src\": \"icons/icon-128.png\",\n\t\t\t\"sizes\": \"128x128\",\n\t\t\t\"type\": \"image/png\"\n\t\t},\n\t\t{\n\t\t\t\"src\": \"icons/icon-256.png\",\n\t\t\t\"sizes\": \"256x256\",\n\t\t\t\"type\": \"image/png\"\n\t\t}\n\t]\n}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:25.135Z",
        "time": 21.553999999014195,
        "timings": {
          "blocked": 7.488999997591833,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 13.772000000456813,
          "receive": 0.2930000009655487,
          "_blocked_queueing": 7.482999997591833
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "other"
        },
        "_priority": "High",
        "_resourceType": "other",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/projects/chrome-dino/favicon.ico",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "x-fastly-request-id",
              "value": "1c89c0b5f435a0359ddbb0e569a311d816dc4597"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:13:16 GMT"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "content-length",
              "value": "16174"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21935-LGA"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:56 GMT"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "x-github-request-id",
              "value": "0829:5E02:BE7866:100E445:6354169C"
            },
            {
              "name": "x-timer",
              "value": "S1666455197.631476,VS0,VE14"
            },
            {
              "name": "etag",
              "value": "\"6351ed68-3f2e\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "image/vnd.microsoft.icon"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-origin-cache",
              "value": "HIT"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 16:23:16 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 16174,
            "mimeType": "image/vnd.microsoft.icon",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:25.144Z",
        "time": 21.583000001555774,
        "timings": {
          "blocked": 4.81499999854248,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.001,
          "wait": 15.483000001252861,
          "receive": 1.2840000017604325,
          "_blocked_queueing": 4.80999999854248
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "other"
        },
        "_priority": "High",
        "_resourceType": "other",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://3kh0.github.io/projects/chrome-dino/icons/icon-256.png",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"93\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"93\""
            },
            {
              "name": "Referer",
              "value": "https://3kh0.github.io/projects/chrome-dino/index.html"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; CrOS x86_64 14092.77.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.107 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Chrome OS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "x-fastly-request-id",
              "value": "d57d742ebea4a4e55bc36f2d9ba90ebb98a088cd"
            },
            {
              "name": "date",
              "value": "Sat, 22 Oct 2022 16:13:13 GMT"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "age",
              "value": "0"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "content-length",
              "value": "713"
            },
            {
              "name": "x-served-by",
              "value": "cache-lga21935-LGA"
            },
            {
              "name": "last-modified",
              "value": "Fri, 21 Oct 2022 00:52:56 GMT"
            },
            {
              "name": "server",
              "value": "GitHub.com"
            },
            {
              "name": "x-github-request-id",
              "value": "0803:5CF9:754F7D:9D42BC:63528E96"
            },
            {
              "name": "x-timer",
              "value": "S1666455193.470993,VS0,VE10"
            },
            {
              "name": "etag",
              "value": "\"6351ed68-2c9\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "max-age=600"
            },
            {
              "name": "permissions-policy",
              "value": "interest-cohort=()"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-origin-cache",
              "value": "HIT"
            },
            {
              "name": "x-proxy-cache",
              "value": "MISS"
            },
            {
              "name": "expires",
              "value": "Sat, 22 Oct 2022 16:23:13 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 713,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAAAAAB5Gfe6AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmAgcWNRalkJHDAAAB0UlEQVR42u3cwRGDIBAF0PRoBTaTdtJM2kgFHsg1h0xEWQ247585LG8GWNHxVpLnBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHxm2hsAAAAAAABgYIApJgAAALgEwG4VAAAAAAAAQB8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOMDlNMDAAAAAAAAdN4HAAAAAAAAAH8EaK2jywYAAAAAAAAAAHAcQD+9DgAAAAAAABAAUFFrly+AAQAAAAAAgDiAr0UGTRkAAAAAAAAYAyA2Iz0OAwAAAAAAAAAAAAAAAEASgBMcAAAAkBSg/DkAAGwOAAAAAAAAkBggyKH0EQAAAAAAAKApj8eQMwcQBrAsdwCpAUp5zTOA1ADl+QQwLEBQI/NzyJEfGbeSA0gPELSUdgNcYxMEAABAxRwBAABwDEDL/gIAAID1U72+huYxnWyCALID7F6GAAAAyA1Q0wesOUz9/UABwJUBtt/WVFzuNgE0IQMAAGBb3udc4/MqRLpSAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIyLTAyLTA3VDIyOjQ4OjQ2KzAwOjAwbicopgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMi0wMi0wN1QyMjo0ODo0MyswMDowME1Cv70AAAAASUVORK5CYII=",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-10-22T16:13:25.204Z",
        "time": 13.496000003215158,
        "timings": {
          "blocked": 0.7080000018605497,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.001,
          "wait": 11.487000001453561,
          "receive": 1.299999999901047,
          "_blocked_queueing": 0.7040000018605497
        }
      }
    ]
  }
}